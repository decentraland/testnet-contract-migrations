{
  "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mocks/DummyDataFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport '../interfaces/IDataFeed.sol';\\n\\n/**\\n * @dev Dummy to be used to mock a chainlink data feed\\n */\\ncontract DummyDataFeed is IDataFeed {\\n    address public owner;\\n    uint8 public stateDecimals;\\n    int256 public answer;\\n    uint256 public updatedAtOffset;\\n\\n    /**\\n     * @param _decimals - Number of decimals the decimals function has to return\\n     * @param _answer - Value returned as the second argument of the return value of both getRoundData and latestRoundData\\n     * @param _updatedAtOffset - Value deducted from the fourth argument of the return value of both getRoundData and latestRoundData which is the current block timestamp\\n     */\\n    constructor(uint8 _decimals, int256 _answer, uint256 _updatedAtOffset) {\\n        owner = msg.sender;\\n        stateDecimals = _decimals;\\n        answer = _answer;\\n        updatedAtOffset = _updatedAtOffset;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update the state decimals contract value.\\n     * @param _decimals New value to be set.\\n     */\\n    function setStateDecimals(uint8 _decimals) external onlyOwner {\\n        stateDecimals = _decimals;\\n    }\\n\\n    /**\\n     * @notice Update the answer contract value.\\n     * @param _answer New value to be set.\\n     */\\n    function setAnswer(int256 _answer) external onlyOwner {\\n        answer = _answer;\\n    }\\n\\n    /**\\n     * @notice Update the updatedAtOffset contract value.\\n     * @param _updatedAtOffset New value to be set.\\n     */\\n    function setUpdatedAtOffset(uint256 _updatedAtOffset) external onlyOwner {\\n        updatedAtOffset = _updatedAtOffset;\\n    }\\n\\n    function decimals() external view override returns (uint8) {\\n        return stateDecimals;\\n    }\\n\\n    function latestRoundData()\\n        external\\n        view\\n        override\\n        returns (\\n            uint80,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint80\\n        )\\n    {\\n        return (0, answer, 0, block.timestamp - updatedAtOffset, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDataFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @notice Chainlink Data Feed interface\\n * @dev This is a renamed copy of https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\n * containing only the required functions required by our contracts.\\n * We could have imported the chainlink/contracts package but decided not to due to the large amount of things imported we would not need.\\n */\\ninterface IDataFeed {\\n    /**\\n     * @notice Get the number of decimals present in the response value\\n     * @return The number of decimals\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the price from the latest round\\n     * @return roundId - The round ID\\n     * @return answer - The price \\n     * @return startedAt - Timestamp of when the round started\\n     * @return updatedAt - Timestamp of when the round was updated\\n     * @return answeredInRound - The round ID of the round in which the answer was computed\\n     */\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
  "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_updatedAtOffset\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"answer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"setAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setStateDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedAtOffset\",\"type\":\"uint256\"}],\"name\":\"setUpdatedAtOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAtOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "ContractName": "DummyDataFeed",
  "CompilerVersion": "v0.7.6+commit.7338295f",
  "OptimizationUsed": "1",
  "Runs": "1",
  "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000015180",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": ""
}