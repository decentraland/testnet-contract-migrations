{
  "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ens/DCLControllerV2.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.15;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IENSRegistry.sol\\\";\\nimport \\\"../interfaces/IDCLRegistrar.sol\\\";\\nimport \\\"../interfaces/IERC20Token.sol\\\";\\n\\ncontract DCLControllerV2 is Ownable {\\n    using Address for address;\\n\\n    // Price of each name\\n    uint256 constant public PRICE = 100 ether;\\n\\n    // Accepted ERC20 token\\n    IERC20Token public acceptedToken;\\n    // DCL Registrar\\n    IDCLRegistrar public registrar;\\n    // Fee Collector\\n    address public feeCollector;\\n\\n    // Emitted when a name is bought\\n    event NameBought(address indexed _caller, address indexed _beneficiary, uint256 _price, string _name);\\n\\n    // Emitted when the fee collector is changed\\n    event FeeCollectorChanged(address indexed _oldFeeCollector, address indexed _newFeeCollector);\\n\\n    /**\\n\\t * @dev Constructor of the contract\\n     * This contract does not support ERC20 tokens that do not revert on an invalid transfer.\\n     * @param _acceptedToken - address of the accepted ERC20 token\\n     * @param _registrar - address of the DCL registrar contract\\n     * @param _feeCollector - address of the fee collector\\n     * @param _owner - address of the contract owner\\n\\t */\\n    constructor(IERC20Token _acceptedToken, IDCLRegistrar _registrar, address _feeCollector, address _owner) public {\\n        require(address(_acceptedToken).isContract(), \\\"Accepted token should be a contract\\\");\\n        require(address(_registrar).isContract(), \\\"Registrar should be a contract\\\");\\n\\n        // Accepted token\\n        acceptedToken = _acceptedToken;\\n        // DCL registrar\\n        registrar = _registrar;\\n\\n        _setFeeCollector(_feeCollector);\\n\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n\\t * @dev Register a name\\n     * This function transfers the PRICE from the sender to the fee collector without checking the return value of the transferFrom function.\\n     * This means that only tokens that revert when the transfer fails due to insufficient balance or insufficient approve should be used.\\n     * If the token does not revert on an invalid transfer, the register will succeed and a name will be minted without being paid for.\\n     * @param _name - name to be registered\\n\\t * @param _beneficiary - owner of the name\\n\\t */\\n    function register(string memory _name, address _beneficiary) public {\\n        // Check for valid beneficiary\\n        require(_beneficiary != address(0), \\\"Invalid beneficiary\\\");\\n\\n        // Check if the name is valid\\n        _requireNameValid(_name);\\n\\n        // Register the name\\n        registrar.register(_name, _beneficiary);\\n        // Transfer PRICE to the fee collector\\n        acceptedToken.transferFrom(msg.sender, feeCollector, PRICE);\\n        // Log\\n        emit NameBought(msg.sender, _beneficiary, PRICE, _name);\\n    }\\n\\n    /**\\n     * @notice Set the fee collector\\n     * @dev Only the owner can change the fee collector\\n     * @param _feeCollector - the address of the new collector\\n     */\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        _setFeeCollector(_feeCollector);\\n    }\\n\\n    /**\\n    * @dev Validate a name\\n    * @notice that only a-z is allowed\\n    * @param _name - string for the name\\n    */\\n    function _requireNameValid(string memory _name) internal pure {\\n        bytes memory tempName = bytes(_name);\\n        require(\\n            tempName.length >= 2 && tempName.length <= 15,\\n            \\\"Name should be greater than or equal to 2 and less than or equal to 15\\\"\\n        );\\n        for(uint256 i = 0; i < tempName.length; i++) {\\n            require(_isLetter(tempName[i]) || _isNumber(tempName[i]), \\\"Invalid Character\\\");\\n        }\\n    }\\n\\n    function _isLetter(bytes1 _char) internal pure returns (bool) {\\n        return (_char >= 0x41 && _char <= 0x5A) || (_char >= 0x61 && _char <= 0x7A);\\n    }\\n\\n    function _isNumber(bytes1 _char) internal pure returns (bool) {\\n        return (_char >= 0x30 && _char <= 0x39);\\n    }\\n\\n    function _setFeeCollector(address _feeCollector) internal {\\n        require(_feeCollector != address(0), \\\"Invalid fee collector\\\");\\n        \\n        emit FeeCollectorChanged(feeCollector, _feeCollector);\\n\\n        feeCollector = _feeCollector;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDCLRegistrar.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.15;\\n\\ncontract IDCLRegistrar {\\n    /**\\n\\t * @dev Allows to create a subdomain (e.g. \\\"nacho.dcl.eth\\\"), set its resolver, owner and target address\\n\\t * @param _subdomain - subdomain  (e.g. \\\"nacho\\\")\\n\\t * @param _beneficiary - address that will become owner of this new subdomain\\n\\t */\\n    function register(string calldata _subdomain, address _beneficiary) external;\\n\\n     /**\\n\\t * @dev Re-claim the ownership of a subdomain (e.g. \\\"nacho\\\").\\n     * @notice After a subdomain is transferred by this contract, the owner in the ENS registry contract\\n     * is still the old owner. Therefore, the owner should call `reclaim` to update the owner of the subdomain.\\n\\t * @param _tokenId - erc721 token id which represents the node (subdomain).\\n     * @param _owner - new owner.\\n     */\\n    function reclaim(uint256 _tokenId, address _owner) external;\\n\\n    /**\\n     * @dev Transfer a name to a new owner.\\n     * @param _from - current owner of the node.\\n     * @param _to - new owner of the node.\\n     * @param _id - node id.\\n     */\\n    function transferFrom(address _from, address _to, uint256 _id) public;\\n\\n    /**\\n\\t * @dev Check whether a name is available to be registered or not\\n\\t * @param _labelhash - hash of the name to check\\n     * @return whether the name is available or not\\n     */\\n    function available(bytes32 _labelhash) public view returns (bool);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IENSRegistry.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.5.15;\\n\\n/**\\n * @title EnsRegistry\\n * @dev Extract of the interface for ENS Registry\\n*/\\ncontract IENSRegistry {\\n    function setOwner(bytes32 node, address owner) public;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\\n    function setResolver(bytes32 node, address resolver) public;\\n    function owner(bytes32 node) public view returns (address);\\n    function resolver(bytes32 node) public view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Token.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.15;\\n\\ncontract IERC20Token {\\n    function balanceOf(address from) public view returns (uint256);\\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\\n    function allowance(address owner, address spender) public view returns (uint256);\\n    function burn(uint256 amount) public;\\n}\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
  "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"internalType\":\"contract IDCLRegistrar\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"NameBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"contract IDCLRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
  "ContractName": "DCLControllerV2",
  "CompilerVersion": "v0.5.15+commit.6a57276f",
  "OptimizationUsed": "1",
  "Runs": "200",
  "ConstructorArguments": "0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc9420000000000000000000000002a187453064356c898cae034eaed119e1663acb80000000000000000000000009a6ebe7e2a7722f8200d0ffb63a1f6406a0d7dce0000000000000000000000009a6ebe7e2a7722f8200d0ffb63a1f6406a0d7dce",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": ""
}