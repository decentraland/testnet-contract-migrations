{
  "SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-11-28\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface ICollection {\r\n    function isCollectionFromFactory(address _collection) external view returns (bool);\r\n    function items(uint256 _itemId) external view returns (string memory, uint256, uint256, uint256, address, string memory, string memory);\r\n    function creator() external view returns (address);\r\n    function globalManagers(address _user) external view returns (bool);\r\n    function itemManagers(uint256 _itemId, address _user) external view returns (bool);\r\n}\r\n\r\ninterface ITPRegistry {\r\n    function isThirdPartyManager(string memory _thirdPartyId, address _manager) external view returns (bool);\r\n    function thirdParties(string memory _tpID) external view returns (\r\n        bool,\r\n        bytes32,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        string memory,\r\n        string memory\r\n    );\r\n}  \r\n\r\ninterface INFT {\r\n    function isApprovedForAll(address _user, address _operator) external view returns (bool);\r\n    function getApproved(uint256 _nft) external view returns (address);\r\n    function updateOperator(uint256 _nft) external view returns (address);\r\n    function updateManager(address _user, address _operator) external view returns (bool);\r\n\r\n    function ownerOf(uint256 _nft) external view returns (address);\r\n\r\n    function encodeTokenId(int x, int y) external view returns (uint256);\r\n    function getLandEstateId(uint256 nft) external view returns (uint256);\r\n\r\n}  \r\n\r\ninterface IDCLRegistrar {\r\n     /**\r\n     * @dev Get the owner of a subdomain\r\n     * @param _subdomain - string of the subdomain\r\n     * @return owner of the subdomain\r\n     */\r\n    function getOwnerOf(string memory _subdomain) external view returns (address);\r\n}\r\n\r\n\r\ncontract Checker {\r\n    function validateWearables(\r\n        address _sender,\r\n        ICollection[] calldata _factories,\r\n        ICollection _collection,\r\n        uint256 _itemId,\r\n        string calldata _contentHash\r\n    ) external view returns (bool) {\r\n        bool hasAccess = false;\r\n        uint256 i = 0;\r\n\r\n        while(!hasAccess && i < _factories.length) {\r\n            ICollection factory = _factories[i];\r\n            i++;\r\n\r\n            if(!factory.isCollectionFromFactory(address(_collection))) {\r\n                continue;\r\n            }\r\n\r\n            address creator = _collection.creator();\r\n            if (\r\n                creator != _sender && \r\n                !_collection.globalManagers(_sender) &&\r\n                !_collection.itemManagers(_itemId, _sender)\r\n            ) {\r\n                continue;\r\n            }\r\n\r\n            (,,,,,,string memory contentHash) = _collection.items(_itemId);\r\n\r\n            hasAccess = keccak256(bytes(_contentHash)) == keccak256(bytes(contentHash));\r\n        }\r\n\r\n        return hasAccess;\r\n    }\r\n\r\n    function validateThirdParty(\r\n        address _sender,\r\n        ITPRegistry _tpRegistry, \r\n        string memory _tpId,\r\n        bytes32 _root\r\n    ) external view returns (bool) {\r\n        if (!_tpRegistry.isThirdPartyManager(_tpId, _sender)) {\r\n            return false;\r\n        }\r\n\r\n        (bool isApproved, bytes32 root,,,,,) = _tpRegistry.thirdParties(_tpId);\r\n\r\n        return isApproved && root == _root;\r\n    }\r\n\r\n    function checkName(address _sender, IDCLRegistrar _registrar, string calldata _name) external view returns (bool) {\r\n        return _sender == _registrar.getOwnerOf(_name);\r\n    }\r\n\r\n    function checkLAND(address _sender, INFT _land, INFT _estate, int256 _x, int256 _y) external view returns (bool) {\r\n        uint256 landId = _land.encodeTokenId(_x, _y);\r\n        address owner = _land.ownerOf(landId);\r\n\r\n        if(owner == _sender) {\r\n            return true;\r\n        }\r\n\r\n        if(owner == address(_estate)) {\r\n            uint256 estateId = _estate.getLandEstateId(landId);\r\n\r\n            if(_estate.ownerOf(estateId) == _sender) {\r\n                return true;\r\n            }\r\n\r\n            if(_estate.getApproved(estateId) == _sender) {\r\n                return true;\r\n            }\r\n\r\n            if(_estate.isApprovedForAll(owner, _sender)){\r\n                return true;\r\n            }\r\n\r\n            if(_estate.updateManager(owner, _sender)){\r\n                return true;\r\n            }\r\n\r\n            if(_estate.updateOperator(landId) == _sender){\r\n                return true;\r\n            }\r\n        } else {\r\n            if(_land.getApproved(landId) == _sender) {\r\n                return true;\r\n            }\r\n\r\n            if(_land.isApprovedForAll(owner, _sender)){\r\n                return true;\r\n            }\r\n\r\n            if(_land.updateManager(owner, _sender)){\r\n                return true;\r\n            }\r\n\r\n            if(_land.updateOperator(landId) == _sender){\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}",
  "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"contract INFT\",\"name\":\"_land\",\"type\":\"address\"},{\"internalType\":\"contract INFT\",\"name\":\"_estate\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_y\",\"type\":\"int256\"}],\"name\":\"checkLAND\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"contract IDCLRegistrar\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"checkName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"contract ITPRegistry\",\"name\":\"_tpRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tpId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"validateThirdParty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"contract ICollection[]\",\"name\":\"_factories\",\"type\":\"address[]\"},{\"internalType\":\"contract ICollection\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_contentHash\",\"type\":\"string\"}],\"name\":\"validateWearables\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "ContractName": "Checker",
  "CompilerVersion": "v0.8.17+commit.8df45f5f",
  "OptimizationUsed": "0",
  "Runs": "200",
  "ConstructorArguments": "",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "None",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": "ipfs://07490a5bbb4ab0f211c3d9ead7999706395349525aab6d736f398cff6a7f54fa"
}