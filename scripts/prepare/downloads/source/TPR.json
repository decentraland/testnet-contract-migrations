{
  "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/registries/ThirdPartyRegistryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity  0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport \\\"../commons/OwnableInitializable.sol\\\";\\nimport \\\"../commons/NativeMetaTransaction.sol\\\";\\nimport \\\"../interfaces/ICommittee.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libs/String.sol\\\";\\n\\ncontract ThirdPartyRegistryV2 is OwnableInitializable, NativeMetaTransaction, Initializable {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant CONSUME_SLOTS_TYPEHASH = keccak256(\\n        bytes(\\\"ConsumeSlots(string thirdPartyId,uint256 qty,bytes32 salt)\\\")\\n    );\\n\\n    struct ConsumeSlots {\\n        string thirdPartyId;\\n        uint256 qty;\\n        bytes32 salt;\\n    }\\n\\n    struct ConsumeSlotsParam {\\n        uint256 qty;\\n        bytes32 salt;\\n        bytes32 sigR;\\n        bytes32 sigS;\\n        uint8 sigV;\\n    }\\n\\n    struct ThirdPartyParam {\\n        string id;\\n        string metadata;\\n        string resolver;\\n        address[] managers;\\n        bool[] managerValues;\\n        uint256 slots;\\n    }\\n\\n    struct ItemParam {\\n        string id;\\n        string metadata;\\n    }\\n\\n    struct ItemReviewParam {\\n        string id;\\n        string metadata;\\n        string contentHash;\\n        bool value;\\n    }\\n\\n    struct ThirdPartyReviewParam {\\n        string id;\\n        bool value;\\n        ItemReviewParam[] items;\\n    }\\n\\n    struct Item {\\n        string metadata;\\n        string contentHash;\\n        bool isApproved;\\n        uint256 registered;\\n    }\\n\\n    struct ThirdParty {\\n        bool isApproved;\\n        bytes32 root;\\n        uint256 maxItems;\\n        uint256 consumedSlots;\\n        uint256 registered;\\n        string metadata;\\n        string resolver;\\n        string[] itemIds;\\n        mapping(bytes32 => uint256) receipts;\\n        mapping(address => bool) managers;\\n        mapping(string => Item) items;\\n        mapping(string => bool) rules;\\n    }\\n\\n    mapping(string => ThirdParty) public thirdParties;\\n    string[] public thirdPartyIds;\\n\\n    address public thirdPartyAggregator;\\n    address public feesCollector;\\n    ICommittee public committee;\\n    IERC20  public acceptedToken;\\n    uint256 public itemSlotPrice;\\n    IOracle public oracle;\\n\\n    bool public initialThirdPartyValue;\\n    bool public initialItemValue;\\n\\n    event ThirdPartyAdded(string _thirdPartyId, string _metadata, string _resolver, bool _isApproved, address[] _managers, uint256 _itemSlots, address _sender);\\n    event ThirdPartyUpdated(string _thirdPartyId, string _metadata, string _resolver, address[] _managers, bool[] _managerValues, uint256 _itemSlots, address _sender);\\n    event ThirdPartyItemSlotsBought(string _thirdPartyId, uint256 _price, uint256 _value, address _sender);\\n    event ThirdPartyReviewed(string _thirdPartyId, bool _value, address _sender);\\n    event ThirdPartyReviewedWithRoot(string _thirdPartyId, bytes32 _root, bool _isApproved, address _sender);\\n    event ThirdPartyRuleAdded(string _thirdPartyId, string _rule, bool _value, address _sender);\\n\\n    event ItemReviewed(string _thirdPartyId, string _itemId, string _metadata, string _contentHash, bool _value, address _sender);\\n    event ItemSlotsConsumed(string _thirdPartyId, uint256 _qty, address indexed _signer, bytes32 _messageHash, address indexed _sender);\\n\\n    event ThirdPartyAggregatorSet(address indexed _oldThirdPartyAggregator, address indexed _newThirdPartyAggregator);\\n    event FeesCollectorSet(address indexed _oldFeesCollector, address indexed _newFeesCollector);\\n    event CommitteeSet(ICommittee indexed _oldCommittee, ICommittee indexed _newCommittee);\\n    event AcceptedTokenSet(IERC20 indexed _oldAcceptedToken, IERC20 indexed _newAcceptedToken);\\n    event OracleSet(IOracle indexed _oldOracle, IOracle indexed _newOracle);\\n    event ItemSlotPriceSet(uint256 _oldItemSlotPrice, uint256 _newItemSlotPrice);\\n    event InitialThirdPartyValueSet(bool _oldInitialThirdPartyValue, bool _newInitialThirdPartyValue);\\n    event InitialItemValueSet(bool _oldInitialItemValue, bool _newInitialItemValue);\\n\\n   /**\\n    * @notice Initialize the contract\\n    * @param _owner - owner of the contract\\n    * @param _thirdPartyAggregator - third party aggregator\\n    * @param _feesCollector - fees collector\\n    * @param _committee - committee smart contract\\n    * @param _acceptedToken - accepted token\\n    * @param _oracle - oracle smart contract\\n    * @param _itemSlotPrice - item price in USD dollar. 18 decimals\\n    */\\n    function initialize(\\n        address _owner,\\n        address _thirdPartyAggregator,\\n        address _feesCollector,\\n        ICommittee _committee,\\n        IERC20 _acceptedToken,\\n        IOracle _oracle,\\n        uint256 _itemSlotPrice\\n    ) public initializer {\\n        _initializeEIP712(\\\"Decentraland Third Party Registry\\\", \\\"1\\\");\\n        _initOwnable();\\n\\n        setThirdPartyAggregator(_thirdPartyAggregator);\\n        setFeesCollector(_feesCollector);\\n        setCommittee(_committee);\\n        setAcceptedToken(_acceptedToken);\\n        setOracle(_oracle);\\n        setInitialItemValue(false);\\n        setInitialThirdPartyValue(true);\\n        setItemSlotPrice(_itemSlotPrice);\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    modifier onlyCommittee() {\\n        require(\\n            committee.members(_msgSender()),\\n            \\\"TPR#onlyCommittee: SENDER_IS_NOT_A_COMMITTEE_MEMBER\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyThirdPartyAggregator() {\\n        require(\\n            thirdPartyAggregator == _msgSender(),\\n            \\\"TPR#onlyThirdPartyAggregator: SENDER_IS_NOT_THE_PARTY_AGGREGATOR\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n    * @notice Set the third party aggregator\\n    * @param _newThirdPartyAggregator - third party aggregator\\n    */\\n    function setThirdPartyAggregator(address _newThirdPartyAggregator) onlyOwner public {\\n        require(_newThirdPartyAggregator != address(0), \\\"TPR#setThirdPartyAggregator: INVALID_THIRD_PARTY_AGGREGATOR\\\");\\n\\n        emit ThirdPartyAggregatorSet(thirdPartyAggregator, _newThirdPartyAggregator);\\n        thirdPartyAggregator = _newThirdPartyAggregator;\\n    }\\n\\n\\n     /**\\n    * @notice Set the fees collector\\n    * @param _newFeesCollector - fees collector\\n    */\\n    function setFeesCollector(address _newFeesCollector) onlyOwner public {\\n        require(_newFeesCollector != address(0), \\\"TPR#setFeesCollector: INVALID_FEES_COLLECTOR\\\");\\n\\n        emit FeesCollectorSet(feesCollector, _newFeesCollector);\\n        feesCollector = _newFeesCollector;\\n    }\\n\\n    /**\\n    * @notice Set the committee\\n    * @param _newCommittee - committee contract\\n    */\\n    function setCommittee(ICommittee _newCommittee) onlyOwner public {\\n        require(address(_newCommittee) != address(0), \\\"TPR#setCommittee: INVALID_COMMITTEE\\\");\\n\\n        emit CommitteeSet(committee, _newCommittee);\\n        committee = _newCommittee;\\n    }\\n\\n    /**\\n    * @notice Set the accepted token\\n    * @param _newAcceptedToken - accepted ERC20 token for collection deployment\\n    */\\n    function setAcceptedToken(IERC20 _newAcceptedToken) onlyOwner public {\\n        require(address(_newAcceptedToken) != address(0), \\\"TPR#setAcceptedToken: INVALID_ACCEPTED_TOKEN\\\");\\n\\n        emit AcceptedTokenSet(acceptedToken, _newAcceptedToken);\\n        acceptedToken = _newAcceptedToken;\\n    }\\n\\n     /**\\n    * @notice Set the oracle\\n    * @param _newOracle - oracle contract\\n    */\\n    function setOracle(IOracle _newOracle) onlyOwner public {\\n        require(address(_newOracle) != address(0), \\\"TPR#setOracle: INVALID_ORACLE\\\");\\n\\n        emit OracleSet(oracle, _newOracle);\\n        oracle = _newOracle;\\n    }\\n\\n     /**\\n    * @notice Set the item slot price\\n    * @param _newItemSlotPrice - item slot price\\n    */\\n    function setItemSlotPrice(uint256 _newItemSlotPrice) onlyOwner public {\\n        emit ItemSlotPriceSet(itemSlotPrice, _newItemSlotPrice);\\n\\n        itemSlotPrice = _newItemSlotPrice;\\n    }\\n\\n    /**\\n    * @notice Set whether third parties should be init approved or not\\n    * @param _newinitialThirdPartyValue - initial value\\n    */\\n    function setInitialThirdPartyValue(bool _newinitialThirdPartyValue) onlyOwner public {\\n        emit InitialThirdPartyValueSet(initialThirdPartyValue, _newinitialThirdPartyValue);\\n        initialThirdPartyValue = _newinitialThirdPartyValue;\\n    }\\n\\n    /**\\n    * @notice Set whether items should be init approved or not\\n    * @param _newinitialItemValue - initial value\\n    */\\n    function setInitialItemValue(bool _newinitialItemValue) onlyOwner public {\\n        emit InitialItemValueSet(initialItemValue, _newinitialItemValue);\\n        initialItemValue = _newinitialItemValue;\\n    }\\n\\n    /**\\n    * @notice Add third parties\\n    * @param _thirdParties - third parties to be added\\n    */\\n    function addThirdParties(ThirdPartyParam[] calldata _thirdParties) onlyThirdPartyAggregator external {\\n        for (uint256 i = 0; i < _thirdParties.length; i++) {\\n            ThirdPartyParam memory thirdPartyParam = _thirdParties[i];\\n\\n            require(bytes(thirdPartyParam.id).length > 0, \\\"TPR#addThirdParties: EMPTY_ID\\\");\\n            require(bytes(thirdPartyParam.metadata).length > 0, \\\"TPR#addThirdParties: EMPTY_METADATA\\\");\\n            require(bytes(thirdPartyParam.resolver).length > 0, \\\"TPR#addThirdParties: EMPTY_RESOLVER\\\");\\n            require(thirdPartyParam.managers.length > 0, \\\"TPR#addThirdParties: EMPTY_MANAGERS\\\");\\n\\n            ThirdParty storage thirdParty = thirdParties[thirdPartyParam.id];\\n            require(thirdParty.registered == 0, \\\"TPR#addThirdParties: THIRD_PARTY_ALREADY_ADDED\\\");\\n\\n            thirdParty.registered = 1;\\n            thirdParty.metadata = thirdPartyParam.metadata;\\n            thirdParty.resolver = thirdPartyParam.resolver;\\n            thirdParty.isApproved = initialThirdPartyValue;\\n            thirdParty.maxItems = thirdPartyParam.slots;\\n\\n            for (uint256 m = 0; m < thirdPartyParam.managers.length; m++) {\\n                thirdParty.managers[thirdPartyParam.managers[m]] = true;\\n            }\\n\\n            thirdPartyIds.push(thirdPartyParam.id);\\n\\n            emit ThirdPartyAdded(\\n                thirdPartyParam.id,\\n                thirdParty.metadata,\\n                thirdParty.resolver,\\n                thirdParty.isApproved,\\n                thirdPartyParam.managers,\\n                thirdParty.maxItems,\\n                _msgSender()\\n            );\\n        }\\n    }\\n\\n    /**\\n    * @notice Update third parties\\n    * @param _thirdParties - third parties to be updated\\n    */\\n    function updateThirdParties(ThirdPartyParam[] calldata _thirdParties) external {\\n        address sender = _msgSender();\\n\\n        for (uint256 i = 0; i < _thirdParties.length; i++) {\\n            ThirdPartyParam memory thirdPartyParam = _thirdParties[i];\\n\\n            require(bytes(thirdPartyParam.id).length > 0, \\\"TPR#updateThirdParties: EMPTY_ID\\\");\\n\\n            ThirdParty storage thirdParty = thirdParties[thirdPartyParam.id];\\n            require(\\n                thirdParty.managers[sender] || thirdPartyAggregator == sender,\\n                \\\"TPR#updateThirdParties: SENDER_IS_NOT_MANAGER_OR_THIRD_PARTY_AGGREGATOR\\\"\\n            );\\n\\n            _checkThirdParty(thirdParty);\\n\\n            if (bytes(thirdPartyParam.metadata).length > 0) {\\n                thirdParty.metadata = thirdPartyParam.metadata;\\n            }\\n\\n            if (bytes(thirdPartyParam.resolver).length > 0) {\\n                thirdParty.resolver = thirdPartyParam.resolver;\\n            }\\n\\n            require(\\n                thirdPartyParam.managers.length == thirdPartyParam.managerValues.length,\\n                \\\"TPR#updateThirdParties: LENGTH_MISMATCH\\\"\\n            );\\n\\n            for (uint256 m = 0; m < thirdPartyParam.managers.length; m++) {\\n                address manager = thirdPartyParam.managers[m];\\n                bool value = thirdPartyParam.managerValues[m];\\n                if (!value) {\\n                    require(sender != manager, \\\"TPR#updateThirdParties: MANAGER_CANT_SELF_REMOVE\\\");\\n                }\\n\\n                thirdParty.managers[manager] = value;\\n            }\\n\\n            uint256 slots = thirdPartyParam.slots;\\n\\n            if (slots > 0) {\\n                require(thirdPartyAggregator == sender, \\\"TPR#updateThirdParties: SENDER_IS_NOT_THIRD_PARTY_AGGREGATOR\\\");\\n\\n                thirdParty.maxItems = thirdParty.maxItems.add(slots);\\n            }\\n\\n            emit ThirdPartyUpdated(\\n                thirdPartyParam.id,\\n                thirdParty.metadata,\\n                thirdParty.resolver,\\n                thirdPartyParam.managers,\\n                thirdPartyParam.managerValues,\\n                thirdPartyParam.slots,\\n                sender\\n            );\\n        }\\n    }\\n\\n    /**\\n    * @notice Buy item slots\\n    * @dev It is recomended to send the _maxPrice a little bit higher than expected in order to\\n    * prevent minimum rate slippage\\n    * @param _thirdPartyId - third party id\\n    * @param _qty - qty of item slots to be bought\\n    * @param _maxPrice - max price to paid\\n    */\\n    function buyItemSlots(string calldata _thirdPartyId, uint256 _qty, uint256 _maxPrice) external {\\n        address sender = _msgSender();\\n\\n        ThirdParty storage thirdParty = thirdParties[_thirdPartyId];\\n\\n        _checkThirdParty(thirdParty);\\n\\n        uint256 rate = _getRateFromOracle();\\n\\n        uint256 finalPrice = itemSlotPrice.mul(1 ether).mul(_qty).div(rate);\\n\\n        require(finalPrice <= _maxPrice, \\\"TPR#buyItems: PRICE_HIGHER_THAN_MAX_PRICE\\\");\\n\\n        thirdParty.maxItems = thirdParty.maxItems.add(_qty);\\n\\n        if (finalPrice > 0) {\\n            require(\\n                acceptedToken.transferFrom(sender, feesCollector, finalPrice),\\n                \\\"TPR#buyItemSlots: TRANSFER_FROM_FAILED\\\"\\n            );\\n        }\\n\\n        emit ThirdPartyItemSlotsBought(_thirdPartyId, finalPrice, _qty, sender);\\n    }\\n\\n     /**\\n    * @notice Review third party items\\n    * @param _thirdParties - Third parties with items to be reviewed\\n    */\\n    function reviewThirdParties(ThirdPartyReviewParam[] calldata _thirdParties) onlyCommittee external {\\n        address sender = _msgSender();\\n\\n        for (uint256 i = 0; i < _thirdParties.length; i++) {\\n            ThirdPartyReviewParam memory thirdPartyReview = _thirdParties[i];\\n\\n            ThirdParty storage thirdParty = thirdParties[thirdPartyReview.id];\\n            _checkThirdParty(thirdParty);\\n\\n            thirdParty.isApproved = thirdPartyReview.value;\\n            emit ThirdPartyReviewed(thirdPartyReview.id, thirdParty.isApproved, sender);\\n\\n            for (uint256 j = 0; j < thirdPartyReview.items.length; j++) {\\n                ItemReviewParam memory itemReview = thirdPartyReview.items[j];\\n                require(bytes(itemReview.contentHash).length > 0, \\\"TPR#reviewThirdParties: INVALID_CONTENT_HASH\\\");\\n\\n                Item storage item = thirdParty.items[itemReview.id];\\n                _checkItem(item);\\n\\n                item.contentHash = itemReview.contentHash;\\n                item.isApproved = itemReview.value;\\n\\n                if (bytes(itemReview.metadata).length > 0) {\\n                    item.metadata = itemReview.metadata;\\n                }\\n\\n                emit ItemReviewed(\\n                    thirdPartyReview.id,\\n                    itemReview.id,\\n                    item.metadata,\\n                    item.contentHash,\\n                    item.isApproved,\\n                    sender\\n                );\\n            }\\n        }\\n    }\\n\\n     /**\\n     * @notice Review third parties with Merkle Root\\n     * @dev The amount of slots should be the same as the amount of items in the merkle tree \\n     * @param _thirdPartyId - third party id\\n     * @param _root - Merkle tree root\\n     * @param _consumeSlotsParams - Data to consume slots mutilple times in a single transaction\\n     */\\n    function reviewThirdPartyWithRoot(\\n        string calldata _thirdPartyId,\\n        bytes32 _root,\\n        ConsumeSlotsParam[] calldata _consumeSlotsParams\\n    ) onlyCommittee external {\\n        address sender = _msgSender();\\n\\n        require(_root != bytes32(0), \\\"TPR#reviewThirdPartyWithRoot: INVALID_ROOT\\\");\\n\\n        ThirdParty storage thirdParty = thirdParties[_thirdPartyId];\\n\\n        _checkThirdParty(thirdParty);\\n\\n        _consumeSlots(_thirdPartyId, _consumeSlotsParams);\\n\\n        thirdParty.isApproved = true;\\n        thirdParty.root = _root;\\n\\n        emit ThirdPartyReviewedWithRoot(_thirdPartyId, _root, thirdParty.isApproved, sender);\\n    }\\n\\n    /**\\n     * @notice Consume third party slots\\n     * @param _consumeSlotsParams - Data to consume slots mutilple times in a single transaction\\n     */\\n    function consumeSlots(string calldata _thirdPartyId, ConsumeSlotsParam[] calldata _consumeSlotsParams) onlyCommittee external {\\n        ThirdParty storage thirdParty = thirdParties[_thirdPartyId];\\n\\n        _checkThirdParty(thirdParty);\\n\\n        _consumeSlots(_thirdPartyId, _consumeSlotsParams);\\n    }\\n\\n    /**\\n     * @notice Set rules\\n     * @param _thirdPartyId - Third party id\\n     * @param _rules - Rules to be updated\\n     * @param _values - Values for the rules to be updated\\n     */\\n    function setRules(string memory _thirdPartyId, string[] memory _rules, bool[] memory _values) onlyCommittee external {\\n        address sender = _msgSender();\\n\\n        require(_rules.length == _values.length, \\\"TPR#setRules: LENGTH_MISMATCH\\\");\\n\\n        ThirdParty storage thirdParty = thirdParties[_thirdPartyId];\\n\\n        _checkThirdParty(thirdParty);\\n\\n        for (uint256 i = 0; i < _rules.length; i++) {\\n            string memory rule = _rules[i];\\n            bool value = _values[i];\\n\\n            require(bytes(rule).length > 0, \\\"TPR#setRules: INVALID_RULE\\\");\\n\\n            thirdParty.rules[rule] = value;\\n\\n            emit ThirdPartyRuleAdded(_thirdPartyId, rule, value, sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the value of a given rule in a third party\\n     * @param _thirdPartyId - Id of the third party\\n     * @param _rule - Rule for which the value is to be obtained\\n     * @return Boolean representing the value of the rule\\n     */\\n    function getRuleValue(string calldata _thirdPartyId, string calldata _rule) external view returns (bool){\\n        return thirdParties[_thirdPartyId].rules[_rule];\\n    }\\n\\n    /**\\n    * @notice Returns the count of third parties\\n    * @return Count of third parties\\n    */\\n    function thirdPartiesCount() external view returns (uint256) {\\n        return thirdPartyIds.length;\\n    }\\n\\n     /**\\n    * @notice Returns if an address is a third party's manager\\n    * @return bool whether an address is a third party's manager or not\\n    */\\n    function isThirdPartyManager(string memory _thirdPartyId, address _manager) external view returns (bool) {\\n        return thirdParties[_thirdPartyId].managers[_manager];\\n    }\\n\\n     /**\\n    * @notice Returns the count of items from a third party\\n    * @return Count of third party's items\\n    */\\n    function itemsCount(string memory _thirdPartyId) external view returns (uint256) {\\n        return thirdParties[_thirdPartyId].consumedSlots;\\n    }\\n\\n    /**\\n    * @notice Returns an item id by index\\n    * @return id of the item\\n    */\\n    function itemIdByIndex(string memory _thirdPartyId, uint256 _index) external view returns (string memory) {\\n        return thirdParties[_thirdPartyId].itemIds[_index];\\n    }\\n\\n     /**\\n    * @notice Returns an item\\n    * @return Item\\n    */\\n    function itemsById(string memory _thirdPartyId, string memory _itemId) external view returns (Item memory) {\\n        return thirdParties[_thirdPartyId].items[_itemId];\\n    }\\n\\n    /**\\n     * @notice Consume third party slots\\n     * @param _consumeSlotsParams - Data to consume slots mutilple times in a single transaction\\n     */\\n    function _consumeSlots(string calldata _thirdPartyId, ConsumeSlotsParam[] calldata _consumeSlotsParams) internal {\\n        address sender = _msgSender();\\n\\n        ThirdParty storage thirdParty = thirdParties[_thirdPartyId];\\n\\n        for (uint256 i = 0; i < _consumeSlotsParams.length; i++) {\\n            ConsumeSlotsParam memory consumeSlotParam = _consumeSlotsParams[i];\\n\\n            require(consumeSlotParam.qty > 0, \\\"TPR#_consumeSlots: INVALID_QTY\\\");\\n\\n            uint256 newConsumedSlots = thirdParty.consumedSlots.add(consumeSlotParam.qty);\\n\\n            require(thirdParty.maxItems >= newConsumedSlots, 'TPR#_consumeSlots: NO_ITEM_SLOTS_AVAILABLE');\\n\\n            bytes32 messageHash = toTypedMessageHash(\\n                keccak256(abi.encode(CONSUME_SLOTS_TYPEHASH, keccak256(bytes(_thirdPartyId)), consumeSlotParam.qty, consumeSlotParam.salt))\\n            );\\n\\n            require(thirdParty.receipts[messageHash] == 0, 'TPR#_consumeSlots: MESSAGE_ALREADY_PROCESSED');\\n\\n            address signer = ecrecover(messageHash, consumeSlotParam.sigV, consumeSlotParam.sigR, consumeSlotParam.sigS);\\n\\n            require(thirdParty.managers[signer], 'TPR#_consumeSlots: INVALID_SIGNER');\\n\\n            thirdParty.receipts[messageHash] = consumeSlotParam.qty;\\n            thirdParty.consumedSlots = newConsumedSlots;\\n\\n            emit ItemSlotsConsumed(_thirdPartyId, consumeSlotParam.qty, signer, messageHash, sender);\\n        }\\n    }\\n\\n    /**\\n    * @dev Safely call Oracle.getRate\\n    * @return Rate\\n    */\\n    function _getRateFromOracle() internal view returns(uint256) {\\n        /* solium-disable-next-line */\\n        (bool success, bytes memory data) = address(oracle).staticcall(\\n            abi.encodeWithSelector(oracle.getRate.selector)\\n        );\\n\\n        require(success, \\\"TPR#_getRateFromOracle: INVALID_RATE_FROM_ORACLE\\\");\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /**\\n    * @dev Check whether a third party has been registered\\n    * @param _thirdParty - Third party\\n    */\\n    function _checkThirdParty(ThirdParty storage _thirdParty) internal view {\\n        require(_thirdParty.registered > 0, \\\"TPR#_checkThirdParty: INVALID_THIRD_PARTY\\\");\\n    }\\n\\n    /**\\n    * @dev Check whether an item has been registered\\n    * @param _item - Item\\n    */\\n    function _checkItem(Item memory _item) internal pure {\\n        require(_item.registered > 0, \\\"TPR#_checkItem: INVALID_ITEM\\\");\\n    }\\n\\n    /**\\n    * @dev Check whether an item param is well formed\\n    * @param _item - Item param\\n    */\\n    function _checkItemParam(ItemParam memory _item) internal pure {\\n        require(bytes(_item.id).length > 0, \\\"TPR#_checkItemParam: EMPTY_ID\\\");\\n        require(bytes(_item.metadata).length > 0, \\\"TPR#_checkItemParam: EMPTY_METADATA\\\");\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/OwnableInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./ContextMixin.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableInitializable is ContextMixin {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function _initOwnable () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/commons/NativeMetaTransaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { EIP712Base } from \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    using SafeMath for uint256;\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) external payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"NMT#executeMetaTransaction: SIGNER_AND_SIGNATURE_DO_NOT_MATCH\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            msg.sender,\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call{value: msg.value}(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"NMT#executeMetaTransaction: CALL_FAILED\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NMT#verify: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ICommittee {\\n    function members(address _address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\n\\ninterface IERC20 {\\n    function balanceOf(address from) external view returns (uint256);\\n    function transferFrom(address from, address to, uint tokens) external returns (bool);\\n    function transfer(address to, uint tokens) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function burn(uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IOracle {\\n    function getRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/String.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nlibrary String {\\n\\n    /**\\n     * @dev Convert bytes32 to string.\\n     * @param _x - to be converted to string.\\n     * @return string\\n     */\\n    function bytes32ToString(bytes32 _x) internal pure returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint charCount = 0;\\n        for (uint j = 0; j < 32; j++) {\\n            bytes1 currentChar = bytes1(bytes32(uint(_x) * 2 ** (8 * j)));\\n            if (currentChar != 0) {\\n                bytesString[charCount] = currentChar;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    /**\\n     * @dev Convert uint to string.\\n     * @param _i - uint256 to be converted to string.\\n     * @return _uintAsString uint in string\\n     */\\n    function uintToString(uint _i) internal pure returns (string memory _uintAsString) {\\n        uint i = _i;\\n\\n        if (i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + i % 10));\\n            i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @dev Convert an address to string.\\n     * @param _x - address to be converted to string.\\n     * @return string representation of the address\\n     */\\n    function addressToString(address _x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint160(_x) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    /**\\n     * @dev Lowercase a string.\\n     * @param _str - to be converted to string.\\n     * @return string\\n     */\\n    function toLowerCase(string memory _str) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(_str);\\n        bytes memory bLower = new bytes(bStr.length);\\n\\n        for (uint i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 0x20 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 0x20);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/ContextMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\nabstract contract ContextMixin {\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        returns (address payable sender)\\n    {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\"\r\n    },\r\n    \"contracts/commons/EIP712Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\ncontract EIP712Base {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 public domainSeparator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name,\\n        string memory version\\n    )\\n        internal\\n    {\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getChainId() public pure returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, messageHash)\\n            );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
  "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_oldAcceptedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_newAcceptedToken\",\"type\":\"address\"}],\"name\":\"AcceptedTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICommittee\",\"name\":\"_oldCommittee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ICommittee\",\"name\":\"_newCommittee\",\"type\":\"address\"}],\"name\":\"CommitteeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldFeesCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newFeesCollector\",\"type\":\"address\"}],\"name\":\"FeesCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_oldInitialItemValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_newInitialItemValue\",\"type\":\"bool\"}],\"name\":\"InitialItemValueSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_oldInitialThirdPartyValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_newInitialThirdPartyValue\",\"type\":\"bool\"}],\"name\":\"InitialThirdPartyValueSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_itemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_contentHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ItemReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldItemSlotPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newItemSlotPrice\",\"type\":\"uint256\"}],\"name\":\"ItemSlotPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ItemSlotsConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOracle\",\"name\":\"_oldOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IOracle\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_resolver\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isApproved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemSlots\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ThirdPartyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldThirdPartyAggregator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newThirdPartyAggregator\",\"type\":\"address\"}],\"name\":\"ThirdPartyAggregatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ThirdPartyItemSlotsBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ThirdPartyReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isApproved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ThirdPartyReviewedWithRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_rule\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ThirdPartyRuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_resolver\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"_managerValues\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemSlots\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ThirdPartyUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resolver\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"managerValues\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"slots\",\"type\":\"uint256\"}],\"internalType\":\"struct ThirdPartyRegistryV2.ThirdPartyParam[]\",\"name\":\"_thirdParties\",\"type\":\"tuple[]\"}],\"name\":\"addThirdParties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"buyItemSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committee\",\"outputs\":[{\"internalType\":\"contract ICommittee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct ThirdPartyRegistryV2.ConsumeSlotsParam[]\",\"name\":\"_consumeSlotsParams\",\"type\":\"tuple[]\"}],\"name\":\"consumeSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_rule\",\"type\":\"string\"}],\"name\":\"getRuleValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialItemValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialThirdPartyValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirdPartyAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesCollector\",\"type\":\"address\"},{\"internalType\":\"contract ICommittee\",\"name\":\"_committee\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemSlotPrice\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isThirdPartyManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"itemIdByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemSlotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_itemId\",\"type\":\"string\"}],\"name\":\"itemsById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registered\",\"type\":\"uint256\"}],\"internalType\":\"struct ThirdPartyRegistryV2.Item\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"}],\"name\":\"itemsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct ThirdPartyRegistryV2.ItemReviewParam[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ThirdPartyRegistryV2.ThirdPartyReviewParam[]\",\"name\":\"_thirdParties\",\"type\":\"tuple[]\"}],\"name\":\"reviewThirdParties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct ThirdPartyRegistryV2.ConsumeSlotsParam[]\",\"name\":\"_consumeSlotsParams\",\"type\":\"tuple[]\"}],\"name\":\"reviewThirdPartyWithRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_newAcceptedToken\",\"type\":\"address\"}],\"name\":\"setAcceptedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommittee\",\"name\":\"_newCommittee\",\"type\":\"address\"}],\"name\":\"setCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeesCollector\",\"type\":\"address\"}],\"name\":\"setFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newinitialItemValue\",\"type\":\"bool\"}],\"name\":\"setInitialItemValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newinitialThirdPartyValue\",\"type\":\"bool\"}],\"name\":\"setInitialThirdPartyValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newItemSlotPrice\",\"type\":\"uint256\"}],\"name\":\"setItemSlotPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_thirdPartyId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_rules\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"setRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newThirdPartyAggregator\",\"type\":\"address\"}],\"name\":\"setThirdPartyAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"thirdParties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxItems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumedSlots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registered\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resolver\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdPartiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdPartyAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdPartyIds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resolver\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"managerValues\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"slots\",\"type\":\"uint256\"}],\"internalType\":\"struct ThirdPartyRegistryV2.ThirdPartyParam[]\",\"name\":\"_thirdParties\",\"type\":\"tuple[]\"}],\"name\":\"updateThirdParties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
  "ContractName": "ThirdPartyRegistryV2",
  "CompilerVersion": "v0.7.6+commit.7338295f",
  "OptimizationUsed": "1",
  "Runs": "1",
  "ConstructorArguments": "",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": ""
}