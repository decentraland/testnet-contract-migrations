{
  "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ListApp.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2020-07-24\\n*/\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ListApp {\\n    /// Events\\n    event Add(address indexed _caller, string _value);\\n    event Remove(address indexed _caller,  string _value);\\n\\n    string constant PLACE_HOLDER = \\\"____INVALID_PLACE_HOLER\\\";\\n\\n    /// Errors\\n    string constant ERROR_VALUE_NOT_PART_OF_THE_LIST = \\\"ERROR_VALUE_NOT_PART_OF_THE_LIST\\\";\\n    string constant ERROR_VALUE_PART_OF_THE_LIST = \\\"ERROR_VALUE_PART_OF_THE_LIST\\\";\\n    string constant ERROR_INVALID_INDEX = \\\"ERROR_INVALID_INDEX\\\";\\n    string constant ERROR_INVALID_VALUE = \\\"ERROR_INVALID_VALUE\\\";\\n    string constant ERROR_INVALID_TYPE = \\\"ERROR_INVALID_TYPE\\\";\\n    string constant ERROR_INVALID_ADDRESS = \\\"ERROR_INVALID_ADDRESS\\\";\\n\\n    /// State\\n    string public name;\\n    string public symbol;\\n    string public listType;\\n    string[] public values;\\n    mapping(string => uint256) internal indexByValue;\\n\\n    /// ACL\\n    bytes32 constant public ADD_ROLE = keccak256(\\\"ADD_ROLE\\\");\\n    bytes32 constant public REMOVE_ROLE = keccak256(\\\"REMOVE_ROLE\\\");\\n\\n\\n    /**\\n     * @dev Initialize contract\\n     * @notice Create a new list: `_symbol` (`_name`) with type: `_type`\\n     * @param _name The list's display name\\n     * @param _symbol The list's display symbol\\n     * @param _type The list's type\\n     */\\n    function initialize(string _name, string _symbol, string _type) external {\\n        _requireValidType(_type);\\n\\n        name = _name;\\n        symbol = _symbol;\\n        listType = _type;\\n\\n        // Invalidate first position\\n        values.push(PLACE_HOLDER);\\n    }\\n\\n    /**\\n     * @dev Add a value to the  list\\n     * @notice Add \\\"`_value`\\\" to the `self.symbol(): string` list. `self.getTypeHash(): bytes32 == 0x55d2d27e31c4cb7b29e0a26c4da29beed88162ab503267550adc2b08511eb9f1 ? 'Take a look: https://play.decentraland.org/?position=' + _value : ''`\\n     * @param _value String value to remove\\n     */\\n    function add(string _value) external {\\n        // Check if the value is part of the list\\n        require(indexByValue[_value] == 0, ERROR_VALUE_PART_OF_THE_LIST);\\n        // Check if the value is not the placeholder\\n        require(keccak256(_value) != keccak256(PLACE_HOLDER), ERROR_INVALID_VALUE);\\n\\n        bytes32 typeHash = getTypeHash();\\n\\n        if (_isStringType(typeHash)) {\\n            _add(_value);\\n        } else if (_isAddressType(typeHash)) {\\n            _addAddress(_value);\\n        } else {\\n            revert(ERROR_INVALID_TYPE);\\n        }\\n    }\\n\\n    /**\\n     * @dev Remove a value from the list\\n     * @notice Remove \\\"`_value`\\\" from the `self.symbol(): string` list\\n     * @param _value String value to remove\\n     */\\n    function remove(string _value) external {\\n        require(indexByValue[_value] > 0, ERROR_VALUE_NOT_PART_OF_THE_LIST);\\n\\n        // Values length\\n        uint256 lastValueIndex = size();\\n\\n        // Index of the value to remove in the array\\n        uint256 removedIndex = indexByValue[_value];\\n\\n        // Last value id\\n        string lastValue = values[lastValueIndex];\\n\\n        // Override index of the removed value with the last one\\n        values[removedIndex] = lastValue;\\n        indexByValue[lastValue] = removedIndex;\\n\\n        emit Remove(msg.sender, _value);\\n\\n        // Clean storage\\n        values.length--;\\n        delete indexByValue[_value];\\n    }\\n\\n    /**\\n    * @dev Get list's size\\n    * @return list's size\\n    */\\n    function size() public view returns (uint256) {\\n        return values.length - 1;\\n    }\\n\\n    /**\\n    * @dev Get list's item\\n    * @param _index of the item\\n    * @return item at index\\n    */\\n    function get(uint256 _index) public view returns (string) {\\n        require(_index < values.length - 1, ERROR_INVALID_INDEX);\\n\\n        return values[_index + 1];\\n    }\\n\\n    function getTypeHash()public view returns (bytes32) {\\n        return keccak256(listType);\\n    }\\n\\n    /**\\n    * @dev Add a value to the  list\\n    * @notice that will revert if the value is not a valid address\\n    * @param _value String value to remove\\n    */\\n    function _addAddress(string _value) internal {\\n        require(_toAddress(_value) != address(0), ERROR_INVALID_ADDRESS);\\n        _add(_value);\\n    }\\n\\n    /**\\n    * @dev Add a value to the  list\\n    * @param _value String value to remove\\n    */\\n    function _add(string _value) internal {\\n        // Store the value to be looped\\n        uint256 index = values.push(_value);\\n\\n        // Save mapping of the value within its position in the array\\n        indexByValue[_value] = index - 1;\\n\\n        emit Add(msg.sender, _value);\\n    }\\n\\n    function _requireValidType(string _type) internal {\\n        bytes32 typeHash = keccak256(_type);\\n        require(_isStringType(typeHash) || _isAddressType(typeHash), ERROR_INVALID_TYPE);\\n    }\\n\\n    function _isStringType(bytes32 typeHash) internal pure returns (bool) {\\n        return typeHash == keccak256(\\\"COORDINATES\\\") || typeHash == keccak256(\\\"NAME\\\");\\n    }\\n\\n    function _isAddressType(bytes32 typeHash) internal pure returns (bool) {\\n        return typeHash == keccak256(\\\"ADDRESS\\\");\\n    }\\n\\n    function _toAddress(\\n        string memory account\\n    ) internal pure returns (address accountAddress) {\\n        // convert the account argument from address to bytes.\\n        bytes memory accountBytes = bytes(account);\\n\\n        // create a new fixed-size byte array for the ascii bytes of the address.\\n        bytes memory accountAddressBytes = new bytes(20);\\n\\n        // declare variable types.\\n        uint8 b;\\n        uint8 nibble;\\n        uint8 asciiOffset;\\n\\n        // only proceed if the provided string has a length of 40.\\n        if (accountBytes.length == 42) {\\n            if(accountBytes[0] != \\\"0\\\") return address(0);\\n            if(accountBytes[1] != \\\"x\\\") return address(0);\\n            for (uint256 i = 0; i < 40; i++) {\\n                // get the byte in question.\\n                b = uint8(accountBytes[i + 2]);\\n\\n                // ensure that the byte is a valid ascii character (0-9, A-F, a-f)\\n                if (b < 48) return address(0);\\n                if (57 < b && b < 65) return address(0);\\n                if (70 < b && b < 97) return address(0);\\n                if (102 < b) return address(0); //bytes(hex\\\"\\\");\\n\\n                // find the offset from ascii encoding to the nibble representation.\\n                if (b < 65) { // 0-9\\n                    asciiOffset = 48;\\n                } else if (70 < b) { // a-f\\n                    asciiOffset = 87;\\n                } else { // A-F\\n                    asciiOffset = 55;\\n                }\\n\\n                // store left nibble on even iterations, then store byte on odd ones.\\n                if (i % 2 == 0) {\\n                    nibble = b - asciiOffset;\\n                } else {\\n                    accountAddressBytes[(i - 1) / 2] = (\\n                        byte(16 * nibble + (b - asciiOffset))\\n                    );\\n                }\\n            }\\n\\n            // pack up the fixed-size byte array and cast it to accountAddress.\\n            bytes memory packed = abi.encodePacked(accountAddressBytes);\\n            assembly {\\n                accountAddress := mload(add(packed, 20))\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
  "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"ADD_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REMOVE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTypeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"Remove\",\"type\":\"event\"}]",
  "ContractName": "ListApp",
  "CompilerVersion": "v0.4.24+commit.e67f0147",
  "OptimizationUsed": "0",
  "Runs": "200",
  "ConstructorArguments": "",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": ""
}