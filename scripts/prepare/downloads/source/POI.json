{
  "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StringList.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StringList is Ownable {\\n    /// Events\\n    event Add(address indexed _caller, string _value);\\n    event Remove(address indexed _caller,  string _value);\\n\\n    string constant PLACE_HOLDER = \\\"____INVALID_PLACE_HOLER\\\";\\n    bytes32 constant PLACE_HOLDER_HASH = keccak256(abi.encodePacked(PLACE_HOLDER));\\n\\n    /// Errors\\n    string constant ERROR_VALUE_NOT_PART_OF_THE_LIST = \\\"ERROR_VALUE_NOT_PART_OF_THE_LIST\\\";\\n    string constant ERROR_VALUE_PART_OF_THE_LIST = \\\"ERROR_VALUE_PART_OF_THE_LIST\\\";\\n    string constant ERROR_INVALID_INDEX = \\\"ERROR_INVALID_INDEX\\\";\\n    string constant ERROR_INVALID_VALUE = \\\"ERROR_INVALID_VALUE\\\";\\n\\n    /// State\\n    string public name;\\n    string[] public values;\\n    mapping(string => uint256) internal indexByValue;\\n\\n    /**\\n     * @dev Initialize contract\\n     * @notice Create a new list with name `_name`, ownership will be assiged to deployer address.\\n     * @param _name The list's display name\\n     */\\n    constructor(string memory _name) {\\n        name = _name;\\n\\n        // Invalidate first position\\n        values.push(PLACE_HOLDER);\\n    }\\n\\n    /**\\n     * @dev Add a value to the  list\\n     * @notice Add `_value` to the string list.\\n     * @param _value String value to remove\\n     */\\n    function add(string calldata _value) external onlyOwner {\\n        // Check if the value is part of the list\\n        require(indexByValue[_value] == 0, ERROR_VALUE_PART_OF_THE_LIST);\\n\\n        // Check if the value is not the placeholder\\n        require(keccak256(abi.encodePacked(_value)) != PLACE_HOLDER_HASH, ERROR_INVALID_VALUE);\\n\\n        _add(_value);\\n    }\\n\\n    /**\\n     * @dev Remove a value from the list\\n     * @notice Remove `_value` from the string list\\n     * @param _value String value to remove\\n     */\\n    function remove(string calldata _value) external onlyOwner {\\n        require(indexByValue[_value] > 0, ERROR_VALUE_NOT_PART_OF_THE_LIST);\\n\\n        // Values length\\n        uint256 lastValueIndex = size();\\n\\n        // Index of the value to remove in the array\\n        uint256 removedIndex = indexByValue[_value];\\n\\n        // Last value id\\n        string memory lastValue = values[lastValueIndex];\\n\\n        // Override index of the removed value with the last one\\n        values[removedIndex] = lastValue;\\n        indexByValue[lastValue] = removedIndex;\\n\\n        emit Remove(msg.sender, _value);\\n\\n        // Clean storage\\n        values.pop();\\n        delete indexByValue[_value];\\n    }\\n\\n    /**\\n    * @dev Get list's size\\n    * @return list's size\\n    */\\n    function size() public view returns (uint256) {\\n        return values.length - 1;\\n    }\\n\\n    /**\\n    * @dev Get list's item\\n    * @param _index of the item\\n    * @return item at index\\n    */\\n    function get(uint256 _index) public view returns (string memory) {\\n        require(_index < size(), ERROR_INVALID_INDEX);\\n\\n        return values[_index + 1];\\n    }\\n\\n    /**\\n    * @dev Add a value to the  list\\n    * @param _value String value to remove\\n    */\\n    function _add(string calldata _value) internal {\\n        // Store the value to be looped\\n        values.push(_value);\\n\\n        // Save mapping of the value within its position in the array\\n        indexByValue[_value] = size();\\n\\n        emit Add(msg.sender, _value);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
  "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "ContractName": "StringList",
  "CompilerVersion": "v0.8.17+commit.8df45f5f",
  "OptimizationUsed": "0",
  "Runs": "200",
  "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000012506f696e7473206f6620496e7465726573740000000000000000000000000000",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": ""
}