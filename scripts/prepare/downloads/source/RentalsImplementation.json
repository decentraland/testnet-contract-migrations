{
  "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Rentals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"@dcl/common-contracts/meta-transactions/NativeMetaTransaction.sol\\\";\\nimport \\\"@dcl/common-contracts/signatures/ContractIndexVerifiable.sol\\\";\\nimport \\\"@dcl/common-contracts/signatures/SignerIndexVerifiable.sol\\\";\\nimport \\\"@dcl/common-contracts/signatures/AssetIndexVerifiable.sol\\\";\\n\\nimport \\\"./interfaces/IERC721Rentable.sol\\\";\\n\\ncontract Rentals is\\n    ContractIndexVerifiable,\\n    SignerIndexVerifiable,\\n    AssetIndexVerifiable,\\n    NativeMetaTransaction,\\n    IERC721Receiver,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    /// @dev EIP712 type hashes for recovering the signer from a signature.\\n    bytes32 private constant LISTING_TYPE_HASH =\\n        keccak256(\\n            bytes(\\n                \\\"Listing(address signer,address contractAddress,uint256 tokenId,uint256 expiration,uint256[3] indexes,uint256[] pricePerDay,uint256[] maxDays,uint256[] minDays,address target)\\\"\\n            )\\n        );\\n\\n    bytes32 private constant OFFER_TYPE_HASH =\\n        keccak256(\\n            bytes(\\n                \\\"Offer(address signer,address contractAddress,uint256 tokenId,uint256 expiration,uint256[3] indexes,uint256 pricePerDay,uint256 rentalDays,address operator,bytes32 fingerprint)\\\"\\n            )\\n        );\\n\\n    uint256 private constant MAX_FEE = 1_000_000;\\n    uint256 private constant MAX_RENTAL_DAYS = 36525; // 100 years\\n\\n    /// @dev EIP165 hash used to detect if a contract supports the verifyFingerprint(uint256,bytes) function.\\n    bytes4 private constant InterfaceId_VerifyFingerprint = bytes4(keccak256(\\\"verifyFingerprint(uint256,bytes)\\\"));\\n\\n    /// @dev EIP165 hash used to detect if a contract supports the onERC721Received(address,address,uint256,bytes) function.\\n    bytes4 private constant InterfaceId_OnERC721Received = bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n\\n    /// @notice ERC20 token used to pay for rent and fees.\\n    IERC20 private token;\\n\\n    /// @notice Tracks necessary rental data per asset.\\n    /// @custom:schema (contract address -> token id -> rental)\\n    mapping(address => mapping(uint256 => Rental)) internal rentals;\\n\\n    /// @notice Address that will receive ERC20 tokens collected as rental fees.\\n    address private feeCollector;\\n\\n    /// @notice Value per million wei that will be deducted from the rental price and sent to the collector.\\n    uint256 private fee;\\n\\n    /// @notice Struct received as a parameter in `acceptListing` containing all information about\\n    /// listing conditions and values required to verify that the signature was created by the signer.\\n    struct Listing {\\n        address signer;\\n        address contractAddress;\\n        uint256 tokenId;\\n        uint256 expiration;\\n        uint256[3] indexes;\\n        uint256[] pricePerDay;\\n        uint256[] maxDays;\\n        uint256[] minDays;\\n        // Makes the listing acceptable only by the address defined as target.\\n        // Using address(0) as target will allow any address to accept it.\\n        address target;\\n        bytes signature;\\n    }\\n\\n    /// @notice Struct received as a parameter in `acceptOffer` or as _data parameter in onERC721Received\\n    /// containing all information about offer conditions and values required to verify that the signature was created by the signer.\\n    struct Offer {\\n        address signer;\\n        address contractAddress;\\n        uint256 tokenId;\\n        uint256 expiration;\\n        uint256[3] indexes;\\n        uint256 pricePerDay;\\n        uint256 rentalDays;\\n        address operator;\\n        bytes32 fingerprint;\\n        bytes signature;\\n    }\\n\\n    /// @notice Info stored in the rentals mapping to track rental information.\\n    struct Rental {\\n        address lessor;\\n        address tenant;\\n        uint256 endDate;\\n    }\\n\\n    /// @dev Used internally as an argument of the _rent function as an alternative to passing a long list\\n    /// of arguments.\\n    struct RentParams {\\n        address lessor;\\n        address tenant;\\n        address contractAddress;\\n        uint256 tokenId;\\n        bytes32 fingerprint;\\n        uint256 pricePerDay;\\n        uint256 rentalDays;\\n        address operator;\\n        bytes signature;\\n    }\\n\\n    event FeeCollectorUpdated(address _from, address _to, address _sender);\\n    event FeeUpdated(uint256 _from, uint256 _to, address _sender);\\n    event AssetClaimed(address indexed _contractAddress, uint256 indexed _tokenId, address _sender);\\n    event AssetRented(\\n        address indexed _contractAddress,\\n        uint256 indexed _tokenId,\\n        address _lessor,\\n        address _tenant,\\n        address _operator,\\n        uint256 _rentalDays,\\n        uint256 _pricePerDay,\\n        bool _isExtension,\\n        address _sender,\\n        bytes _signature\\n    );\\n\\n    constructor() {\\n        // Prevents the implementation to be initialized.\\n        // Initialization can only be done through a Proxy.\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initialize the contract.\\n    /// @dev This method should be called as soon as the contract is deployed.\\n    /// Using this method in favor of a constructor allows the implementation of various kinds of proxies.\\n    /// @param _owner The address of the owner of the contract.\\n    /// @param _token The address of the ERC20 token used by tenants to pay rent.\\n    /// This token is set once on initialization and cannot be changed afterwards.\\n    /// @param _feeCollector Address that will receive rental fees\\n    /// @param _fee Value per million wei that will be transferred from the rental price to the fee collector.\\n    function initialize(\\n        address _owner,\\n        IERC20 _token,\\n        address _feeCollector,\\n        uint256 _fee\\n    ) external initializer {\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        __NativeMetaTransaction_init(\\\"Rentals\\\", \\\"1\\\");\\n        __ContractIndexVerifiable_init();\\n        _transferOwnership(_owner);\\n        _setFeeCollector(_feeCollector);\\n        _setFee(_fee);\\n\\n        token = _token;\\n    }\\n\\n    /// @notice Pause the contract and prevent core functions from being called.\\n    /// Functions that will be paused are:\\n    /// - acceptListing\\n    /// - acceptOffer\\n    /// - onERC721Received (No offers will be accepted through a safeTransfer to this contract)\\n    /// - claim\\n    /// - setUpdateOperator\\n    /// - setManyLandUpdateOperator\\n    /// @dev The contract has to be unpaused or this function will revert.\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Resume the normal functionality of the contract.\\n    /// @dev The contract has to be paused or this function will revert.\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Get the rental data for a given asset.\\n    /// @param _contractAddress The contract address of the asset.\\n    /// @param _tokenId The id of the asset.\\n    function getRental(address _contractAddress, uint256 _tokenId) external view returns (Rental memory) {\\n        return rentals[_contractAddress][_tokenId];\\n    }\\n\\n    /// @notice Get the current token address used for rental payments.\\n    /// @return The address of the token.\\n    function getToken() external view returns (IERC20) {\\n        return token;\\n    }\\n\\n    /// @notice Get the current address that will receive a cut of rental payments as a fee.\\n    /// @return The address of the fee collector.\\n    function getFeeCollector() external view returns (address) {\\n        return feeCollector;\\n    }\\n\\n    /// @notice Get the value per MAX_FEE that will be cut from the rental payment and sent to the fee collector.\\n    /// @return The value of the current fee.\\n    function getFee() external view returns (uint256) {\\n        return fee;\\n    }\\n\\n    /// @notice Get if an asset is currently being rented.\\n    /// @param _contractAddress The contract address of the asset.\\n    /// @param _tokenId The token id of the asset.\\n    /// @return True or false depending if the asset is currently rented.\\n    function getIsRented(address _contractAddress, uint256 _tokenId) public view returns (bool) {\\n        return block.timestamp <= rentals[_contractAddress][_tokenId].endDate;\\n    }\\n\\n    /// @notice Set the address of the fee collector.\\n    /// @param _feeCollector The address of the fee collector.\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        _setFeeCollector(_feeCollector);\\n    }\\n\\n    /// @notice Set the fee (per million wei) for rentals.\\n    /// @param _fee The value for the fee.\\n    function setFee(uint256 _fee) external onlyOwner {\\n        _setFee(_fee);\\n    }\\n\\n    /// @notice Accept a rental listing created by the owner of an asset.\\n    /// @param _listing Contains the listing conditions as well as the signature data for verification.\\n    /// @param _operator The address that will be given operator permissions over an asset.\\n    /// @param _conditionIndex The rental conditions index chosen from the options provided in _listing.\\n    /// @param _rentalDays The amount of days the caller wants to rent the asset.\\n    /// Must be a value between the selected condition's min and max days.\\n    /// @param _fingerprint The fingerprint used to verify composable erc721s.\\n    /// Useful in order to prevent a front run were, for example, the owner removes LAND from an Estate before\\n    /// the listing is accepted. Causing the tenant to end up with an Estate that does not have the amount of LAND\\n    /// they expect.\\n    function acceptListing(\\n        Listing calldata _listing,\\n        address _operator,\\n        uint256 _conditionIndex,\\n        uint256 _rentalDays,\\n        bytes32 _fingerprint\\n    ) external nonReentrant whenNotPaused {\\n        _verifyUnsafeTransfer(_listing.contractAddress, _listing.tokenId);\\n\\n        address lessor = _listing.signer;\\n        address tenant = _msgSender();\\n\\n        // Verify that the caller and the signer are not the same address.\\n        require(tenant != lessor, \\\"Rentals#acceptListing: CALLER_CANNOT_BE_SIGNER\\\");\\n\\n        // Verify that the targeted address in the listing, if not address(0), is the caller of this function.\\n        require(_listing.target == address(0) || _listing.target == tenant, \\\"Rentals#acceptListing: TARGET_MISMATCH\\\");\\n\\n        // Verify that the indexes provided in the listing match the ones in the contract.\\n        _verifyContractIndex(_listing.indexes[0]);\\n        _verifySignerIndex(lessor, _listing.indexes[1]);\\n        _verifyAssetIndex(_listing.contractAddress, _listing.tokenId, lessor, _listing.indexes[2]);\\n\\n        uint256 pricePerDayLength = _listing.pricePerDay.length;\\n\\n        // Verify that pricePerDay, maxDays and minDays have the same length\\n        require(pricePerDayLength == _listing.maxDays.length, \\\"Rentals#acceptListing: MAX_DAYS_LENGTH_MISMATCH\\\");\\n        require(pricePerDayLength == _listing.minDays.length, \\\"Rentals#acceptListing: MIN_DAYS_LENGTH_MISMATCH\\\");\\n\\n        // Verify that the provided condition index is not out of bounds of the listing conditions.\\n        require(_conditionIndex < pricePerDayLength, \\\"Rentals#acceptListing: CONDITION_INDEX_OUT_OF_BOUNDS\\\");\\n\\n        // Verify that the listing is not already expired.\\n        require(_listing.expiration >= block.timestamp, \\\"Rentals#acceptListing: EXPIRED_SIGNATURE\\\");\\n\\n        uint256 maxDays = _listing.maxDays[_conditionIndex];\\n        uint256 minDays = _listing.minDays[_conditionIndex];\\n\\n        // Verify that minDays and maxDays have valid values.\\n        require(minDays <= maxDays, \\\"Rentals#acceptListing: MAX_DAYS_LOWER_THAN_MIN_DAYS\\\");\\n        require(minDays > 0, \\\"Rentals#acceptListing: MIN_DAYS_IS_ZERO\\\");\\n\\n        // Verify that the provided rental days is between min and max days range.\\n        require(_rentalDays >= minDays && _rentalDays <= maxDays, \\\"Rentals#acceptListing: DAYS_NOT_IN_RANGE\\\");\\n\\n        // Verify that the provided rental days does not exceed MAX_RENTAL_DAYS\\n        require(_rentalDays <= MAX_RENTAL_DAYS, \\\"Rentals#acceptListing: RENTAL_DAYS_EXCEEDS_LIMIT\\\");\\n\\n        _verifyListingSigner(_listing);\\n\\n        _rent(\\n            RentParams(\\n                lessor,\\n                tenant,\\n                _listing.contractAddress,\\n                _listing.tokenId,\\n                _fingerprint,\\n                _listing.pricePerDay[_conditionIndex],\\n                _rentalDays,\\n                _operator,\\n                _listing.signature\\n            )\\n        );\\n    }\\n\\n    /// @notice Accept an offer for rent of an asset owned by the caller.\\n    /// @param _offer Contains the offer conditions as well as the signature data for verification.\\n    function acceptOffer(Offer calldata _offer) external {\\n        _verifyUnsafeTransfer(_offer.contractAddress, _offer.tokenId);\\n\\n        _acceptOffer(_offer, _msgSender());\\n    }\\n\\n    /// @notice The original owner of the asset can claim it back if said asset is not being rented.\\n    /// @param _contractAddresses The contract address of the assets to be claimed.\\n    /// @param _tokenIds The token ids of the assets to be claimed.\\n    /// Each tokenId corresponds to a contract address in the same index.\\n    function claim(address[] calldata _contractAddresses, uint256[] calldata _tokenIds) external nonReentrant whenNotPaused {\\n        require(_contractAddresses.length == _tokenIds.length, \\\"Rentals#claim: LENGTH_MISMATCH\\\");\\n\\n        address sender = _msgSender();\\n\\n        uint256 contractAddressesLength = _contractAddresses.length;\\n\\n        for (uint256 i; i < contractAddressesLength; ) {\\n            address contractAddress = _contractAddresses[i];\\n            uint256 tokenId = _tokenIds[i];\\n\\n            // Verify that the rent has finished.\\n            require(!getIsRented(contractAddress, tokenId), \\\"Rentals#claim: CURRENTLY_RENTED\\\");\\n\\n            address lessor = rentals[contractAddress][tokenId].lessor;\\n\\n            // Verify that the caller is the original owner of the asset.\\n            require(lessor == sender, \\\"Rentals#claim: NOT_LESSOR\\\");\\n\\n            // Delete the data for the rental as it is not necessary anymore.\\n            delete rentals[contractAddress][tokenId];\\n\\n            // Transfer the asset back to its original owner.\\n            IERC721Rentable asset = IERC721Rentable(contractAddress);\\n\\n            asset.safeTransferFrom(address(this), sender, tokenId);\\n\\n            emit AssetClaimed(contractAddress, tokenId, sender);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the update operator of the provided assets.\\n    /// @dev Only when the rent is active a tenant can change the operator of an asset.\\n    /// When the rent is over, the lessor is the one that can change operators.\\n    /// In the case of the lessor, this is useful to update the operator without having to claim the asset back once the rent is over.\\n    /// Elements in the param arrays correspond to each other in the same index.\\n    /// For example, asset with address _contractAddresses[0] and token id _tokenIds[0] will be set _operators[0] as operator.\\n    /// @param _contractAddresses The contract addresses of the assets.\\n    /// @param _tokenIds The token ids of the assets.\\n    /// @param _operators The addresses that will have operator privileges over the given assets in the same index.\\n    function setUpdateOperator(\\n        address[] calldata _contractAddresses,\\n        uint256[] calldata _tokenIds,\\n        address[] calldata _operators\\n    ) external nonReentrant whenNotPaused {\\n        require(\\n            _contractAddresses.length == _tokenIds.length && _contractAddresses.length == _operators.length,\\n            \\\"Rentals#setUpdateOperator: LENGTH_MISMATCH\\\"\\n        );\\n\\n        address sender = _msgSender();\\n\\n        uint256 tokenIdsLength = _tokenIds.length;\\n\\n        for (uint256 i; i < tokenIdsLength; ) {\\n            address contractAddress = _contractAddresses[i];\\n            uint256 tokenId = _tokenIds[i];\\n            Rental storage rental = rentals[contractAddress][tokenId];\\n            bool isRented = getIsRented(contractAddress, tokenId);\\n\\n            require(\\n                (isRented && sender == rental.tenant) || (!isRented && sender == rental.lessor),\\n                \\\"Rentals#setUpdateOperator: CANNOT_SET_UPDATE_OPERATOR\\\"\\n            );\\n\\n            IERC721Rentable(contractAddress).setUpdateOperator(tokenId, _operators[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the operator of individual LANDs inside an Estate\\n    /// @dev LAND inside an Estate can be granularly given update operator permissions by calling the setLandUpdateOperator\\n    /// (or setManyLandUpdateOperator) in the Estate contract.\\n    /// All update operators defined like this will remain after the Estate is rented because they are not cleared up on transfer.\\n    /// To prevent these remaining update operators from being able to deploy and override scenes from the current tenant, the tenant\\n    /// can call this function to clear or override them.\\n    /// The lessor can do the same after the rental is over to clear up any individual LAND update operators set by the tenant.\\n    /// @param _contractAddress The address of the Estate contract containing the LANDs that will have their update operators updated.\\n    /// @param _tokenId The Estate id.\\n    /// @param _landTokenIds An array of LAND token id arrays which will have the update operator updated. Each array corresponds to the operator of the same index.\\n    /// @param _operators An array of addresses that will be set as update operators of the provided LAND token ids.\\n    function setManyLandUpdateOperator(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        uint256[][] calldata _landTokenIds,\\n        address[] calldata _operators\\n    ) external nonReentrant whenNotPaused {\\n        require(_landTokenIds.length == _operators.length, \\\"Rentals#setManyLandUpdateOperator: LENGTH_MISMATCH\\\");\\n\\n        Rental storage rental = rentals[_contractAddress][_tokenId];\\n        bool isRented = getIsRented(_contractAddress, _tokenId);\\n        address sender = _msgSender();\\n\\n        require(\\n            (isRented && sender == rental.tenant) || (!isRented && sender == rental.lessor),\\n            \\\"Rentals#setManyLandUpdateOperator: CANNOT_SET_MANY_LAND_UPDATE_OPERATOR\\\"\\n        );\\n\\n        uint256 landTokenIdsLength = _landTokenIds.length;\\n\\n        for (uint256 i; i < landTokenIdsLength; ) {\\n            IERC721Rentable(_contractAddress).setManyLandUpdateOperator(_tokenId, _landTokenIds[i], _operators[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Standard function called by ERC721 contracts whenever a safe transfer occurs.\\n    /// Provides an alternative to acceptOffer by letting the asset holder send the asset to the contract\\n    /// and accepting the offer at the same time.\\n    /// IMPORTANT: Addresses (Not necessarily EOA but contracts as well) that have been given allowance to an asset can safely transfer said asset to this contract\\n    /// to accept an offer. The address that has been given allowance will be considered the lessor, and will enjoy all of its benefits,\\n    /// including the ability to claim the asset back to themselves after the rental period is over.\\n    /// @param _operator Caller of the safeTransfer function.\\n    /// @param _tokenId Id of the asset received.\\n    /// @param _data Bytes containing offer data.\\n    function onERC721Received(\\n        address _operator,\\n        address, // _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external override returns (bytes4) {\\n        if (_operator != address(this)) {\\n            Offer memory offer = abi.decode(_data, (Offer));\\n\\n            // Check that the caller is the contract defined in the offer to ensure the function is being\\n            // called through an ERC721.safeTransferFrom.\\n            // Also check that the token id is the same as the one provided in the offer.\\n            require(msg.sender == offer.contractAddress && offer.tokenId == _tokenId, \\\"Rentals#onERC721Received: ASSET_MISMATCH\\\");\\n\\n            _acceptOffer(offer, _operator);\\n        }\\n\\n        return InterfaceId_OnERC721Received;\\n    }\\n\\n    /// @dev Overriding to return NativeMetaTransaction._getMsgSender for the contract to support meta transactions.\\n    function _msgSender() internal view override returns (address) {\\n        return _getMsgSender();\\n    }\\n\\n    function _setFeeCollector(address _feeCollector) private {\\n        emit FeeCollectorUpdated(feeCollector, feeCollector = _feeCollector, _msgSender());\\n    }\\n\\n    function _setFee(uint256 _fee) private {\\n        require(_fee <= MAX_FEE, \\\"Rentals#_setFee: HIGHER_THAN_MAX_FEE\\\");\\n\\n        emit FeeUpdated(fee, fee = _fee, _msgSender());\\n    }\\n\\n    /// @dev Someone might send an asset to this contract via an unsafe transfer, causing ownerOf checks to be inconsistent with the state\\n    /// of this contract. This function is used to prevent interactions with these assets.\\n    /// ERC721 ASSETS SENT UNSAFELY WILL REMAIN LOCKED INSIDE THIS CONTRACT.\\n    function _verifyUnsafeTransfer(address _contractAddress, uint256 _tokenId) private view {\\n        address lessor = rentals[_contractAddress][_tokenId].lessor;\\n        address assetOwner = IERC721Rentable(_contractAddress).ownerOf(_tokenId);\\n\\n        if (lessor == address(0) && assetOwner == address(this)) {\\n            revert(\\\"Rentals#_verifyUnsafeTransfer: ASSET_TRANSFERRED_UNSAFELY\\\");\\n        }\\n    }\\n\\n    function _acceptOffer(Offer memory _offer, address _lessor) private nonReentrant whenNotPaused {\\n        address tenant = _offer.signer;\\n\\n        // Verify that the caller and the signer are not the same address.\\n        require(_lessor != tenant, \\\"Rentals#_acceptOffer: CALLER_CANNOT_BE_SIGNER\\\");\\n\\n        // Verify that the indexes provided in the offer match the ones in the contract.\\n        _verifyContractIndex(_offer.indexes[0]);\\n        _verifySignerIndex(tenant, _offer.indexes[1]);\\n        _verifyAssetIndex(_offer.contractAddress, _offer.tokenId, tenant, _offer.indexes[2]);\\n\\n        // Verify that the offer is not already expired.\\n        require(_offer.expiration >= block.timestamp, \\\"Rentals#_acceptOffer: EXPIRED_SIGNATURE\\\");\\n\\n        // Verify that the rental days provided in the offer are valid.\\n        require(_offer.rentalDays > 0, \\\"Rentals#_acceptOffer: RENTAL_DAYS_IS_ZERO\\\");\\n\\n        // Verify that the provided rental days does not exceed MAX_RENTAL_DAYS\\n        require(_offer.rentalDays <= MAX_RENTAL_DAYS, \\\"Rentals#_acceptOffer: RENTAL_DAYS_EXCEEDS_LIMIT\\\");\\n\\n        _verifyOfferSigner(_offer);\\n\\n        _rent(\\n            RentParams(\\n                _lessor,\\n                tenant,\\n                _offer.contractAddress,\\n                _offer.tokenId,\\n                _offer.fingerprint,\\n                _offer.pricePerDay,\\n                _offer.rentalDays,\\n                _offer.operator,\\n                _offer.signature\\n            )\\n        );\\n    }\\n\\n    /// @dev Verify that the signer provided in the listing is the address that created the provided signature.\\n    function _verifyListingSigner(Listing calldata _listing) private view {\\n        address listingSigner = _listing.signer;\\n\\n        bytes32 listingHash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    LISTING_TYPE_HASH,\\n                    listingSigner,\\n                    _listing.contractAddress,\\n                    _listing.tokenId,\\n                    _listing.expiration,\\n                    keccak256(abi.encodePacked(_listing.indexes)),\\n                    keccak256(abi.encodePacked(_listing.pricePerDay)),\\n                    keccak256(abi.encodePacked(_listing.maxDays)),\\n                    keccak256(abi.encodePacked(_listing.minDays)),\\n                    _listing.target\\n                )\\n            )\\n        );\\n\\n        _verifySigner(listingSigner, listingHash, _listing.signature);\\n    }\\n\\n    /// @dev Verify that the signer provided in the offer is the address that created the provided signature.\\n    function _verifyOfferSigner(Offer memory _offer) private view {\\n        address offerSigner = _offer.signer;\\n\\n        bytes32 offerHash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    OFFER_TYPE_HASH,\\n                    offerSigner,\\n                    _offer.contractAddress,\\n                    _offer.tokenId,\\n                    _offer.expiration,\\n                    keccak256(abi.encodePacked(_offer.indexes)),\\n                    _offer.pricePerDay,\\n                    _offer.rentalDays,\\n                    _offer.operator,\\n                    _offer.fingerprint\\n                )\\n            )\\n        );\\n\\n        _verifySigner(offerSigner, offerHash, _offer.signature);\\n    }\\n\\n    /// @dev Verify that the signature is valid for the provided signer and hash.\\n    /// Will perform an ecrecover for EOA _signers and ERC1271 verification for contract _signers.\\n    function _verifySigner(\\n        address _signer,\\n        bytes32 _hash,\\n        bytes memory _signature\\n    ) private view {\\n        if (_signer.code.length == 0) {\\n            require(_signer == ECDSAUpgradeable.recover(_hash, _signature), \\\"Rentals#_verifySigner: SIGNER_MISMATCH\\\");\\n        } else {\\n            require(\\n                IERC1271.isValidSignature.selector == IERC1271(_signer).isValidSignature(_hash, _signature),\\n                \\\"Rentals#_verifySigner: MAGIC_VALUE_MISMATCH\\\"\\n            );\\n        }\\n    }\\n\\n    function _rent(RentParams memory _rentParams) private {\\n        IERC721Rentable asset = IERC721Rentable(_rentParams.contractAddress);\\n\\n        // If the provided contract supports the verifyFingerprint function, validate the provided fingerprint.\\n        if (asset.supportsInterface(InterfaceId_VerifyFingerprint)) {\\n            require(asset.verifyFingerprint(_rentParams.tokenId, abi.encode(_rentParams.fingerprint)), \\\"Rentals#_rent: INVALID_FINGERPRINT\\\");\\n        }\\n\\n        Rental storage rental = rentals[_rentParams.contractAddress][_rentParams.tokenId];\\n\\n        // True if the asset is currently rented.\\n        bool isRented = getIsRented(_rentParams.contractAddress, _rentParams.tokenId);\\n        // True if the asset rental period is over, but is has not been claimed back from the contract.\\n        bool isReRent = !isRented && rental.lessor != address(0);\\n        // True if the asset rental period is not over yet, but the lessor and the tenant are the same.\\n        bool isExtend = isRented && rental.lessor == _rentParams.lessor && rental.tenant == _rentParams.tenant;\\n\\n        if (!isExtend && !isReRent) {\\n            // Verify that the asset is not already rented.\\n            require(!isRented, \\\"Rentals#_rent: CURRENTLY_RENTED\\\");\\n        }\\n\\n        if (isReRent) {\\n            // The asset is being rented again without claiming it back first, so we need to check that the previous lessor\\n            // is the same as the lessor this time to prevent anyone else from acting as the lessor.\\n            require(rental.lessor == _rentParams.lessor, \\\"Rentals#_rent: NOT_ORIGINAL_OWNER\\\");\\n        }\\n\\n        if (isExtend) {\\n            // Increase the current end date by the amount of provided rental days.\\n            rental.endDate = rental.endDate + _rentParams.rentalDays * 1 days;\\n        } else {\\n            // Track the original owner of the asset in the lessors map for future use.\\n            rental.lessor = _rentParams.lessor;\\n\\n            // Track the new tenant in the mapping.\\n            rental.tenant = _rentParams.tenant;\\n\\n            // Set the end date of the rental according to the provided rental days\\n            rental.endDate = block.timestamp + _rentParams.rentalDays * 1 days;\\n        }\\n\\n        // Update the asset indexes for both the lessor and the tenant to invalidate old signatures.\\n        _bumpAssetIndex(_rentParams.contractAddress, _rentParams.tokenId, _rentParams.lessor);\\n        _bumpAssetIndex(_rentParams.contractAddress, _rentParams.tokenId, _rentParams.tenant);\\n\\n        // Transfer tokens\\n        if (_rentParams.pricePerDay > 0) {\\n            _handleTokenTransfers(_rentParams.lessor, _rentParams.tenant, _rentParams.pricePerDay, _rentParams.rentalDays);\\n        }\\n\\n        // Only transfer the ERC721 to this contract if it doesn't already have it.\\n        if (asset.ownerOf(_rentParams.tokenId) != address(this)) {\\n            asset.safeTransferFrom(_rentParams.lessor, address(this), _rentParams.tokenId);\\n        }\\n\\n        // Update the operator\\n        asset.setUpdateOperator(_rentParams.tokenId, _rentParams.operator);\\n\\n        emit AssetRented(\\n            _rentParams.contractAddress,\\n            _rentParams.tokenId,\\n            _rentParams.lessor,\\n            _rentParams.tenant,\\n            _rentParams.operator,\\n            _rentParams.rentalDays,\\n            _rentParams.pricePerDay,\\n            isExtend,\\n            _msgSender(),\\n            _rentParams.signature\\n        );\\n    }\\n\\n    /// @dev Transfer the erc20 tokens required to start a rent from the tenant to the lessor and the fee collector.\\n    function _handleTokenTransfers(\\n        address _lessor,\\n        address _tenant,\\n        uint256 _pricePerDay,\\n        uint256 _rentalDays\\n    ) private {\\n        uint256 totalPrice = _pricePerDay * _rentalDays;\\n        uint256 forCollector = (totalPrice * fee) / MAX_FEE;\\n\\n        // Save the reference in memory so it doesn't access storage twice.\\n        IERC20 mToken = token;\\n\\n        // Transfer the rental payment to the lessor minus the fee which is transferred to the collector.\\n        mToken.transferFrom(_tenant, _lessor, totalPrice - forCollector);\\n        mToken.transferFrom(_tenant, feeCollector, forCollector);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@dcl/common-contracts/meta-transactions/NativeMetaTransaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\n\\nabstract contract NativeMetaTransaction is EIP712Upgradeable {\\n    /// @dev EIP712 type hash for recovering the signer from the signature.\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionData)\\\"));\\n\\n    /// @notice Track signer nonces so the same signature cannot be used more than once.\\n    mapping(address => uint256) private nonces;\\n\\n    /// @notice Struct with the data required to verify that the signature signer is the same as `from`.\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionData;\\n    }\\n\\n    event MetaTransactionExecuted(address indexed _userAddress, address indexed _relayerAddress, bytes _functionData);\\n\\n    function __NativeMetaTransaction_init(string memory _name, string memory _version) internal onlyInitializing {\\n        __EIP712_init(_name, _version);\\n    }\\n\\n    function __NativeMetaTransaction_init_unchained() internal onlyInitializing {}\\n\\n    /// @notice Get the current nonce of a given signer.\\n    /// @param _signer The address of the signer.\\n    /// @return The current nonce of the signer.\\n    function getNonce(address _signer) external view returns (uint256) {\\n        return nonces[_signer];\\n    }\\n\\n    /// @notice Execute a transaction from the contract appending _userAddress to the call data.\\n    /// @dev The appended address can then be extracted from the called context with _getMsgSender instead of using msg.sender.\\n    /// The caller of `executeMetaTransaction` will pay for gas fees so _userAddress can experience \\\"gasless\\\" transactions.\\n    /// @param _userAddress The address appended to the call data.\\n    /// @param _functionData Data containing information about the contract function to be called.\\n    /// @param _signature Signature created by _userAddress to validate that they wanted\\n    /// @return The data as bytes of what the relayed function would have returned.\\n    function executeMetaTransaction(\\n        address _userAddress,\\n        bytes calldata _functionData,\\n        bytes calldata _signature\\n    ) external payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({nonce: nonces[_userAddress], from: _userAddress, functionData: _functionData});\\n\\n        require(_verify(_userAddress, metaTx, _signature), \\\"NativeMetaTransaction#executeMetaTransaction: SIGNER_AND_SIGNATURE_DO_NOT_MATCH\\\");\\n\\n        nonces[_userAddress]++;\\n\\n        emit MetaTransactionExecuted(_userAddress, msg.sender, _functionData);\\n\\n        (bool success, bytes memory returnData) = address(this).call{value: msg.value}(abi.encodePacked(_functionData, _userAddress));\\n\\n        // Bubble up error based on https://ethereum.stackexchange.com/a/83577\\n        if (!success) {\\n            assembly {\\n                // Slice the sighash.\\n                returnData := add(returnData, 0x04)\\n            }\\n\\n            revert(abi.decode(returnData, (string)));\\n        }\\n\\n        return returnData;\\n    }\\n\\n    function _verify(\\n        address _signer,\\n        MetaTransaction memory _metaTx,\\n        bytes calldata _signature\\n    ) private view returns (bool) {\\n        bytes32 structHash = keccak256(abi.encode(META_TRANSACTION_TYPEHASH, _metaTx.nonce, _metaTx.from, keccak256(_metaTx.functionData)));\\n        bytes32 typedDataHash = _hashTypedDataV4(structHash);\\n\\n        return _signer == ECDSAUpgradeable.recover(typedDataHash, _signature);\\n    }\\n\\n    /// @dev Extract the address of the sender from the msg.data if available. If not, fallback to returning the msg.sender.\\n    /// @dev It is vital that the implementor uses this function for meta transaction support.\\n    function _getMsgSender() internal view returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n\\n        return sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"@dcl/common-contracts/signatures/ContractIndexVerifiable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract ContractIndexVerifiable is OwnableUpgradeable {\\n    /// @notice Current index at a contract level. Only updatable by the owner of the contract.\\n    /// Updating it will invalidate all signatures created with the previous value on a contract level.\\n    uint256 private contractIndex;\\n\\n    event ContractIndexUpdated(uint256 _newIndex, address _sender);\\n\\n    function __ContractIndexVerifiable_init() internal onlyInitializing {\\n        __Ownable_init();\\n    }\\n\\n    function __ContractIndexVerifiable_init_unchained() internal onlyInitializing {}\\n\\n    /// @notice Get the current contract index.\\n    /// @return The current contract index.\\n    function getContractIndex() external view returns (uint256) {\\n        return contractIndex;\\n    }\\n\\n    /// @notice As the owner of the contract, increase the contract index by 1.\\n    function bumpContractIndex() external onlyOwner {\\n        _bumpContractIndex();\\n    }\\n\\n    /// @dev Increase the contract index by 1\\n    function _bumpContractIndex() internal {\\n        emit ContractIndexUpdated(++contractIndex, _msgSender());\\n    }\\n\\n    /// @dev Reverts if the provided index does not match the contract index.\\n    function _verifyContractIndex(uint256 _index) internal view {\\n        require(_index == contractIndex, \\\"ContractIndexVerifiable#_verifyContractIndex: CONTRACT_INDEX_MISMATCH\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@dcl/common-contracts/signatures/SignerIndexVerifiable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract SignerIndexVerifiable is ContextUpgradeable {\\n    /// @notice Current index per signer.\\n    /// Updating it will invalidate all signatures created with the previous value on a signer level.\\n    /// @custom:schema (signer address -> index)\\n    mapping(address => uint256) private signerIndex;\\n\\n    event SignerIndexUpdated(address indexed _signer, uint256 _newIndex, address _sender);\\n\\n    function __SignerIndexVerifiable_init() internal onlyInitializing {}\\n\\n    function __SignerIndexVerifiable_init_unchained() internal onlyInitializing {}\\n\\n    /// @notice Get the current signer index.\\n    /// @param _signer The address of the signer.\\n    /// @return The index of the given signer.\\n    function getSignerIndex(address _signer) external view returns (uint256) {\\n        return signerIndex[_signer];\\n    }\\n\\n    /// @notice Increase the signer index of the sender by 1.\\n    function bumpSignerIndex() external {\\n        _bumpSignerIndex(_msgSender());\\n    }\\n\\n    /// @dev Increase the signer index by 1\\n    function _bumpSignerIndex(address _signer) internal {\\n        emit SignerIndexUpdated(_signer, ++signerIndex[_signer], _msgSender());\\n    }\\n\\n    /// @dev Reverts if the provided index does not match the signer index.\\n    function _verifySignerIndex(address _signer, uint256 _index) internal view {\\n        require(_index == signerIndex[_signer], \\\"SignerIndexVerifiable#_verifySignerIndex: SIGNER_INDEX_MISMATCH\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@dcl/common-contracts/signatures/AssetIndexVerifiable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract AssetIndexVerifiable is ContextUpgradeable {\\n    /// @notice Current index per asset per signer.\\n    /// Updating it will invalidate all signatures created with the previous value on an asset level.\\n    /// @custom:schema (contract address -> token id -> signer address -> index)\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) private assetIndex;\\n\\n    event AssetIndexUpdated(address indexed _signer, address indexed _contractAddress, uint256 indexed _tokenId, uint256 _newIndex, address _sender);\\n\\n    function __AssetIndexVerifiable_init() internal onlyInitializing {}\\n\\n    function __AssetIndexVerifiable_init_unchained() internal onlyInitializing {}\\n\\n    /// @notice Get the signer index for a given ERC721 token.\\n    /// @param _contractAddress The address of the ERC721 contract.\\n    /// @param _tokenId The id of the ERC721 token.\\n    /// @param _signer The address of the signer.\\n    /// @return The index of the given signer for the provided asset.\\n    function getAssetIndex(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        address _signer\\n    ) external view returns (uint256) {\\n        return assetIndex[_contractAddress][_tokenId][_signer];\\n    }\\n\\n    /// @notice Increase the asset index of the sender by 1.\\n    /// @param _contractAddress The contract address of the asset.\\n    /// @param _tokenId The token id of the asset.\\n    function bumpAssetIndex(address _contractAddress, uint256 _tokenId) external {\\n        _bumpAssetIndex(_contractAddress, _tokenId, _msgSender());\\n    }\\n\\n    /// @dev Increase the asset index by 1\\n    function _bumpAssetIndex(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        address _signer\\n    ) internal {\\n        emit AssetIndexUpdated(_signer, _contractAddress, _tokenId, ++assetIndex[_contractAddress][_tokenId][_signer], _msgSender());\\n    }\\n\\n    /// @dev Reverts if the provided index does not match the asset index.\\n    function _verifyAssetIndex(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        address _signer,\\n        uint256 _index\\n    ) internal view {\\n        require(_index == assetIndex[_contractAddress][_tokenId][_signer], \\\"AssetIndexVerifiable#_verifyAssetIndex: ASSET_INDEX_MISMATCH\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Rentable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @notice Extended ERC721 interface with methods required by the Rentals contract.\\ninterface IERC721Rentable is IERC721 {\\n    /// @dev Updates the operator of the asset.\\n    /// The idea of this role is mostly of a content operator, a role capable of modifying the content of the asset.\\n    /// It is not the same as the one defined in the ERC721 standard, which can manipulate the asset in itself.\\n    function setUpdateOperator(uint256, address) external;\\n\\n    /// @dev Updates the update operator of many DCL LANDs simultaneously inside an Estate.\\n    function setManyLandUpdateOperator(\\n        uint256 _tokenId,\\n        uint256[] memory _landTokenIds,\\n        address _operator\\n    ) external;\\n\\n    /// @dev Checks that the provided fingerprint matches the fingerprint of the composable asset.\\n    function verifyFingerprint(uint256, bytes memory) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
  "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"AssetClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tenant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rentalDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pricePerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExtension\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"AssetRented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ContractIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_functionData\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"SignerIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"indexes\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[]\",\"name\":\"pricePerDay\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxDays\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minDays\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Rentals.Listing\",\"name\":\"_listing\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentalDays\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_fingerprint\",\"type\":\"bytes32\"}],\"name\":\"acceptListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"indexes\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"pricePerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentalDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"fingerprint\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Rentals.Offer\",\"name\":\"_offer\",\"type\":\"tuple\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bumpAssetIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bumpContractIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bumpSignerIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_functionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"getAssetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getIsRented\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRental\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"internalType\":\"struct Rentals.Rental\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"getSignerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][]\",\"name\":\"_landTokenIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"setManyLandUpdateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"setUpdateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
  "ContractName": "Rentals",
  "CompilerVersion": "v0.8.7+commit.e28d00a7",
  "OptimizationUsed": "1",
  "Runs": "200",
  "ConstructorArguments": "",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": ""
}