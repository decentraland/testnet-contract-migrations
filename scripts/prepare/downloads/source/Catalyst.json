{
  "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CatalystApp.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2020-02-06\\n*/\\n\\npragma solidity 0.4.24;\\n\\ncontract CatalystApp {\\n    /// ACL\\n    bytes32 public constant MODIFY_ROLE = keccak256(\\\"MODIFY_ROLE\\\");\\n\\n    /// Errors\\n    string constant ERROR_OWNER_IN_USE = \\\"ERROR_OWNER_IN_USE\\\";\\n    string constant ERROR_DOMAIN_IN_USE = \\\"ERROR_DOMAIN_IN_USE\\\";\\n    string constant ERROR_ID_IN_USE = \\\"ERROR_ID_IN_USE\\\";\\n    string constant ERROR_CATALYST_NOT_FOUND = \\\"ERROR_CATALYST_NOT_FOUND\\\";\\n    string constant ERROR_OWNER_EMPTY = \\\"ERROR_OWNER_EMPTY\\\";\\n    string constant ERROR_DOMAIN_EMPTY = \\\"ERROR_DOMAIN_EMPTY\\\";\\n    string constant ERROR_CATALYST_ALREADY_REMOVED = \\\"ERROR_CATALYST_ALREADY_REMOVED\\\";\\n\\n    struct Catalyst {\\n        bytes32 id;\\n        address owner;\\n        string domain;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    // Catalyst by id\\n    mapping(bytes32 => Catalyst) public catalystById;\\n    // Domains used\\n    mapping(bytes32 => bool) public domains;\\n    // Owners used\\n    mapping(address => bool) public owners;\\n    // Catalyst indexes by id\\n    mapping(bytes32 => uint256) public catalystIndexById;\\n    // Catalyst ids\\n    bytes32[] public catalystIds;\\n\\n    event AddCatalyst(\\n        bytes32 indexed _id,\\n        address indexed _owner,\\n        string _domain\\n    );\\n    event RemoveCatalyst(\\n        bytes32 indexed _id,\\n        address indexed _owner,\\n        string _domain\\n    );\\n\\n\\n\\n    /**\\n    * @dev Add a new catalyst\\n    * @notice Add catalyst with owner `_owner` and domain `_domain`\\n    * @param _owner - owner of the catalyst\\n    * @param _domain - domain of the catalyst\\n    */\\n    function addCatalyst(address _owner, string _domain)\\n        external\\n    {\\n        require(_owner != address(0), ERROR_OWNER_EMPTY);\\n\\n        bytes memory domain = abi.encodePacked(_domain);\\n        require(domain.length > 0, ERROR_DOMAIN_EMPTY);\\n\\n        bytes32 domainHash = keccak256(domain);\\n\\n        // Check if the owner and the domain are free\\n        require(!owners[_owner], ERROR_OWNER_IN_USE);\\n        require(!domains[domainHash], ERROR_DOMAIN_IN_USE);\\n\\n        uint256 startTime = block.timestamp;\\n\\n        // Calculate a catalyst id\\n        bytes32 id = keccak256(abi.encodePacked(startTime, _owner, _domain));\\n\\n        // Check for collisions. Shouldn't happen\\n        require(catalystById[id].owner == address(0), ERROR_ID_IN_USE);\\n\\n        // Store catalyst by its id\\n        catalystById[id] = Catalyst({\\n            id: id,\\n            owner: _owner,\\n            domain: _domain,\\n            startTime: startTime,\\n            endTime: 0\\n        });\\n\\n        // Set owner and domain as used\\n        owners[_owner] = true;\\n        domains[domainHash] = true;\\n\\n        // Store the catalyst id to be looped\\n        uint256 index = catalystIds.push(id);\\n\\n        // Save mapping of the catalyst id within its position in the array\\n        catalystIndexById[id] = index - 1;\\n\\n        // Log\\n        emit AddCatalyst(id, _owner, _domain);\\n    }\\n\\n    /**\\n    * @dev Remove a catalyst\\n    * @notice Remove catalyst `_id` with owner `self.catalystOwner(_id): address` and domain `self.catalystDomain(_id): string`\\n    * @param _id - id of the catalyst\\n    */\\n    function removeCatalyst(bytes32 _id) external  {\\n        Catalyst storage catalyst = catalystById[_id];\\n        bytes32 domainHash = keccak256(abi.encodePacked(catalyst.domain));\\n\\n        require(catalyst.id == _id, ERROR_CATALYST_NOT_FOUND);\\n        require(owners[catalyst.owner], ERROR_CATALYST_ALREADY_REMOVED);\\n        require(domains[domainHash], ERROR_CATALYST_ALREADY_REMOVED);\\n        require(catalyst.endTime == 0, ERROR_CATALYST_ALREADY_REMOVED);\\n\\n        // Catalyst length\\n        uint256 lastCatalystIndex = catalystCount() - 1;\\n\\n        // Index of the catalyst to remove in the array\\n        uint256 removedIndex = catalystIndexById[_id];\\n\\n        // Last catalyst id\\n        bytes32 lastCatalystId = catalystIds[lastCatalystIndex];\\n\\n        // Override index of the removed catalyst with the last one\\n        catalystIds[removedIndex] = lastCatalystId;\\n        catalystIndexById[lastCatalystId] = removedIndex;\\n\\n        // Update end time\\n        catalyst.endTime = block.timestamp;\\n\\n        emit RemoveCatalyst(_id, catalyst.owner, catalyst.domain);\\n\\n        // Clean storage\\n        catalystIds.length--;\\n        delete catalystIndexById[_id];\\n        owners[catalyst.owner] = false;\\n        domains[domainHash] = false;\\n\\n    }\\n\\n    /**\\n    * @dev Get catalyst count\\n    * @return count of catalyst\\n    */\\n    function catalystCount() public view returns (uint256) {\\n        return catalystIds.length;\\n    }\\n\\n    /**\\n    * @dev Get catalyst owner\\n    * @param _id - id of the catalyst\\n    * @return catalyst owner\\n    */\\n    function catalystOwner(bytes32 _id) external view returns (address) {\\n        return catalystById[_id].owner;\\n    }\\n\\n    /**\\n    * @dev Get catalyst domain\\n    * @param _id - id of the catalyst\\n    * @return catalyst domain\\n    */\\n    function catalystDomain(bytes32 _id) external view returns (string memory) {\\n        return catalystById[_id].domain;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
  "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"catalystCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"catalystIndexById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"catalystOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"catalystDomain\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catalystIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"removeCatalyst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"catalystById\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"domain\",\"type\":\"string\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"addCatalyst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODIFY_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"AddCatalyst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"RemoveCatalyst\",\"type\":\"event\"}]",
  "ContractName": "CatalystApp",
  "CompilerVersion": "v0.4.24+commit.e67f0147",
  "OptimizationUsed": "0",
  "Runs": "200",
  "ConstructorArguments": "",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": ""
}