{
  "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/managers/RoyaltiesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n\\nimport '../interfaces/IERC721CollectionV2.sol';\\n\\n\\ncontract RoyaltiesManager{\\n\\n  constructor() {}\\n\\n  /**\\n    * @notice Get the royalties receiver for an specific token\\n    * @dev It tries to get the item beneficiary. If it is the ZERO address, will try to get the creator\\n    * @param _contractAddress - contract address\\n    * @param _tokenId - token id\\n    * @return royaltiesReceiver - address of the royalties receiver\\n    */\\n  function getRoyaltiesReceiver(address _contractAddress, uint256 _tokenId) external view returns(address royaltiesReceiver) {\\n    bool success;\\n    bytes memory res;\\n\\n    (success, res) = _contractAddress.staticcall(\\n        abi.encodeWithSelector(\\n            IERC721CollectionV2(_contractAddress).decodeTokenId.selector,\\n            _tokenId\\n        )\\n    );\\n\\n    if (!success) {\\n      return royaltiesReceiver;\\n    }\\n\\n    (uint256 itemId,) = abi.decode(res, (uint256, uint256));\\n\\n    (success, res) = _contractAddress.staticcall(\\n        abi.encodeWithSelector(\\n            IERC721CollectionV2(_contractAddress).items.selector,\\n            itemId\\n        )\\n    );\\n\\n    if (success) {\\n      // Get item beneficiary\\n      (,,,,royaltiesReceiver,,) = abi.decode(res, (string, uint256, uint256, uint256, address, string, string));\\n    }\\n\\n    if (royaltiesReceiver == address(0)) {\\n      // If still the zero address, use the creator\\n       (success, res) = _contractAddress.staticcall(\\n        abi.encodeWithSelector(\\n            IERC721CollectionV2(_contractAddress).creator.selector\\n        ));\\n\\n        if (!success) {\\n          return royaltiesReceiver;\\n        }\\n\\n        royaltiesReceiver = abi.decode(res, (address));\\n    }\\n\\n    return royaltiesReceiver;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721CollectionV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IERC721CollectionV2 {\\n    function creator() external view returns (address);\\n    function decodeTokenId(uint256 _tokenId) external view returns (uint256, uint256);\\n    function items(uint256 _itemId) external view returns (string memory, uint256, uint256, uint256, address, string memory, string memory);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}",
  "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltiesReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"royaltiesReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
  "ContractName": "RoyaltiesManager",
  "CompilerVersion": "v0.8.10+commit.fc410830",
  "OptimizationUsed": "1",
  "Runs": "1",
  "ConstructorArguments": "",
  "EVMVersion": "Default",
  "Library": "",
  "LicenseType": "",
  "Proxy": "0",
  "Implementation": "",
  "SwarmSource": ""
}